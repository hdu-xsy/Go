{"ApiSpecs":[{"HttpVerb":"GET","Path":"/","Calls":[{"Id":0,"CurrentPath":"/","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"zh-CN\"\u003e\n\t\u003chead\u003e\n\t\t\u003cmeta charset=\"utf-8\"\u003e\n\t\t\u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n\t\t\u003ctitle\u003eindex\u003c/title\u003e\n\t\t\u003c!-- Bootstrap --\u003e\n\t\t\u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n\t\t\u003c!-- 最新版本的 Bootstrap 核心 CSS 文件 --\u003e\n\t\t\u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n\n\t\t\u003c!-- 可选的 Bootstrap 主题文件（一般不用引入） --\u003e\n\t\t\u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n\n\t\t\u003c!-- 最新的 Bootstrap 核心 JavaScript 文件 --\u003e\n\t\t\u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n\t\t\u003cstyle type=\"text/css\"\u003e\n\t\t\tbody{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\n\t\t\u003c/style\u003e\n\t\t\u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\n\t\u003c/head\u003e\n\t\u003cbody\u003e\n\t\t\n\u003cnav id=\"navbar-example\" class=\"navbar navbar-default navbar-static\" role=\"navigation\"\u003e\n    \u003cdiv class=\"container-fluid\"\u003e\n        \u003cdiv class=\"navbar-header\"\u003e\n            \u003cbutton class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\"\n                    data-target=\".bs-js-navbar-scrollspy\"\u003e\n                \u003cspan class=\"sr-only\"\u003e切换导航\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eWeb开发学习笔记\u003c/a\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"collapse navbar-collapse bs-js-navbar-scrollspy\"\u003e\n            \u003cul class=\"nav navbar-nav\"\u003e\n                \u003cli\u003e\u003ca href=\"adminlogin\"\u003e后台 \u003c!--\u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e--\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#go\"\u003egolang与iris框架\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Spring\"\u003eSpring\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Hibernate\"\u003eHibernate\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Struts2\"\u003eStruts2\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#ELJSTL\"\u003eEL及JSTL\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#AJAX\"\u003eAJAX\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#BootStrap\"\u003e栅格与响应式\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#websocket\"\u003ewebsocket与netty框架\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n            \u003cform class=\"navbar-form navbar-left\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Search\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-default\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"/register\"\u003e注册\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/login\"\u003e登录\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/nav\u003e\n\u003cdiv class=\"cow\"\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n    \u003cdiv data-spy=\"scroll\" data-target=\"#navbar-example\" data-offset=\"0\"\n         style=\"height:800px;overflow:auto; position: relative;\" class=\"col-md-8 col-lg-8 col-sm-10 col-xs-10\"\u003e\n        \u003cdiv\u003e\u003cdiv\u003e\n    \u003ch3 id=\"go\"\u003eGoLang与IRIS框架\u003c/h3\u003e\n    \u003cdiv\u003e\n        \u003ch3\u003eGo IRIS框架学习笔记\u003c/h3\u003e\n\n        \u003cblockquote\u003e\n            \u003cp\u003e当前网上关于Golang的IRIS框架的教程极极极极少，有参考价值的也就官方文档，\u003c/p\u003e\n            \u003cp\u003e可惜官网文档\u003cstrong\u003e除 了 代 码 什 么 都 没 有\u003c/strong\u003e，而且 还 \u003cstrong\u003e没 有 中 文 版\u003c/strong\u003e，竟 然 还 是 \u003cstrong\u003e按 照 首 字 母 排 得 序\u003c/strong\u003e，\u003c/p\u003e\n            \u003cp\u003e但是比起热门的GIN、BEEGO、马卡龙框架，IRIS还是有自己的特点的，于是在此整理方便学习和以后使用（以官方文档为主）  []内内容为备注(类型) [...]为方法\u003c/p\u003e\n        \u003c/blockquote\u003e\n        \u003ch4\u003e安装iris和导入iris\u003c/h4\u003e\n        \u003cpre\u003e\n命令行:go get github.com/kataras/iris\n\u003c/pre\u003e\n        \u003cpre\u003e\nimport (\n    \"github.com/kataras/iris\"\n)\n\u003c/pre\u003e\n        \u003ch4\u003e 生成网页与注册路由的一般方法\u003c/h4\u003e\n        \u003cul\u003e\n            \u003cli\u003e\u003ch5\u003emain函数中\u003c/h5\u003e\u003c/li\u003e\n            \u003cpre\u003e\napp.RegisterView(iris.HTML(\"/html[directory]\",\".html[extension]\").Reload(true))\napp.StaticWeb(\"/js[request path]\", \"./js[system path]\") // serve our custom javascript code\napp.Get(\"/\",index[funcName])  //路由\napp.Run(iris.Addr(\":80\"))  //端口\n\u003c/pre\u003e\n            \u003cli\u003e\u003ch5\u003e路由函数中\u003c/h5\u003e\u003c/li\u003e\n            \u003cpre\u003e\nfunc funcName(ctx iris.Context){\n    if err := ctx.View(\"index.html\");err!=nil {\n            //错误处理[...]\n    }\n}\n\u003c/pre\u003e\n            \u003cli\u003e\u003ch5\u003e错误页面\u003c/h5\u003e\u003c/li\u003e\n            \u003cpre\u003e\napp.OnErrorCode(iris.StatusNotFound, func(ctx iris.Context){\n        ctx.View(\"404.html\")\n})\n\u003c/pre\u003e\n        \u003c/ul\u003e\n        \u003ch4\u003e 读取POST请求和ORM基本操作\u003c/h4\u003e\n        \u003cpre\u003e\ntype 表名 struct {\n    Id       int64\u0026#x60;pk\u0026#x60;\n    字段名   string\u0026#x60;unique\u0026#x60;\n    Password string\u0026#x60;notnull\u0026#x60;\n}\n// 生成的表会自动转化格式 如 AdminUser → admin_user\n// 下面例子假定表名为admin_user\nfunc Funcname(ctx iris.Context) {\n    user := AdminUser{}\n    //  读取请求\n    err := ctx.ReadForm(\u0026user)\n    if err !=nil {\n        //[..]\n    }\n    //  ORM\n    //  mysql\n    orm,err := xorm.NewEngine(\"mysql\", \"用户名:密码@/库名?charset=utf8\")\n    //  不同数据库操作不同 具体参考文档\n    if err != nil {\n        app.Logger().Fatalf(\"orm failed to initialized: %v\", err)\n    }\n    iris.RegisterOnInterrupt(func(){\n        orm.Close()\n    })\n    err = orm.Sync2(new(AdminUser))\n    if err != nil {\n        app.Logger().Fatalf(\"orm failed to initialized User table: %v\", err)\n    }\n    adminuser := AdminUser{Account: user.Account}\n    //查找操作\n    if ok, _ := orm.Get(\u0026adminuser); ok { //orm.Id(xxx).Get(\u0026) 或 orm.Where(\"属性=?\",value).Get(\u0026)\n    } else {\n    }\n    //插入操作\n    adminuser.Account = \"AAAAAAA\"\n    orm.Insert(adminuser)\n    //修改操作\n    orm.Id(xx).Update(adminuser)\n    //删除操作\n    orm.delete(adminuser)\n    //查找全部\n    var users []AdminUser\n    orm.Find(\u0026users)\n    //详细操作日后再来学习\n    //官方文档http://www.xorm.io/docs/\n}\n\u003c/pre\u003e\n\n        \u003ch4\u003e带参数的路径\u003c/h4\u003e\n        \u003cpre\u003e\napp.Get(\"/{xxx}/{namedRoute}\", func(ctx iris.Context) {\n        xxx := ctx.Params().Get(\"xxx\")\n        routeName := ctx.Params().Get(\"namedRoute\")\n        //[...]\n})\n\u003c/pre\u003e\n        \u003ch4\u003e Ajax\u003c/h4\u003e\n        \u003cul\u003e\n            \u003cli\u003e\u003ch5\u003e前端页面\u003c/h5\u003e\u003c/li\u003e\n            \u003cpre\u003e\n\u0026lt;script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"\u0026gt;\u0026lt;/script\u0026gt;\n\u0026lt;script type=\"text/javascript\"\u0026gt;\n    $(function() {\n        $(\"#按钮Id\").click(function() {\n            //提交的参数\n            var params = {\n                Account : $(\"#input的Id\").val(),\n                Password : $(\"#input的Id\").val()\n            };\n            $.post(\"/路由\",params,function (参数) {\n                要执行的func(参数);\n        });\n    });\n\u0026lt;/script\u0026gt;\n\u003c/pre\u003e\n            \u003cli\u003e\u003ch5\u003eGo\u003c/h5\u003e\u003c/li\u003e\n            \u003cpre\u003e\n//接收post\nuser := AdminUser{}\nerr := ctx.ReadForm(\u0026user)\nif err !=nil {\n    ctx.StatusCode(iris.StatusInternalServerError)\n    ctx.WriteString(err.Error())\n    ctx.Redirect(\"/404\")\n}\n//要执行的操作func(user)\nctx.WriteString(返回值)\nreturn\n\u003c/pre\u003e\n        \u003c/ul\u003e\n        \u003ch4\u003e session\u003c/h4\u003e\n        \u003cpre\u003e\nvar (\n    cookieNameForSessionID = \"mycookiesessionnameid\"\n    sess                   = sessions.New(sessions.Config{Cookie: cookieNameForSessionID})\n)\nsession := sess.Start(ctx)  //ctx iris.Context\nsession.Set（\"key\", value)\nsession.Get(\"key\")  //若使用Get方法需要强转 指定：GetString GetInt GetBoolean GetAll GetFloat ...\nsession.Delete(\"key\")   //删除\nsession.Clear()     //清空\nsession.Destroy()   //销毁\n\u003c/pre\u003e\n        \u003ch4\u003e WebSokect\u003c/h4\u003e\n        \u003cul\u003e\n            \u003cli\u003e\u003ch5\u003eiris的websocket\u003c/h5\u003e\u003c/li\u003e\n            \u003cul\u003e\n                \u003cli\u003e\u003ch5\u003ehtml\u003c/h5\u003e\u003c/li\u003e\n                \u003cpre\u003e\n    \u0026lt;form name = \"form1\" method=\"post\"\u0026gt;\n        输入聊天信息:\u0026lt;input id=\"msg\" name=\"msg\" type=\"text\" size=\"40\" class=\"form-control\"\u0026gt;\n    \u0026lt;/form\u0026gt;\n    \u0026lt;button name=\"websocket\" id=\"websocket\" class=\"btn btn-default\" onclick=\"send()\"\u0026gt;发送\u0026lt;/button\u0026gt;\n    \u0026lt;script src=\"/iris-ws.js\"\u0026gt;\u0026lt;/script\u0026gt;\n    \u0026lt;div id=\"message\" name=\"message\"\u0026gt;\u0026lt;/div\u0026gt;\n\n    \u003c/pre\u003e\n                \u003cli\u003e\u003ch5\u003ejs\u003c/h5\u003e\u003c/li\u003e\n                \u003cpre\u003e\n    var scheme = document.location.protocol == \"https:\" ? \"wss\" : \"ws\";\n    var port = document.location.port ? (\":\" + document.location.port) : \"\";\n    // see app.Get(\"/echo\", ws.Handler()) on main.go\n    var wsURL = scheme + \"://\" + document.location.hostname + port+\"/echo\";\n    var input = document.getElementById(\"msg\");\n    var output = document.getElementById(\"message\");\n    // Ws comes from the auto-served '/iris-ws.js'\n    var socket = new Ws(wsURL)\n    socket.OnConnect(function () {\n        //连接服务器[...]\n    });\n    socket.OnDisconnect(function () {\n        //无法连接服务器[...]\n    });\n    // read events from the server\n    socket.On(\"消息名称\", function (msg) {\n        //读取事件[...]\n        addMessage(msg+\"\u0026lt;br/\u0026gt;\");\n    });\n    function send() {\n        addMessage(\"Me: \" + input.value); // write ourselves\n        socket.Emit(\"消息名称\", \"消息内容\");// send chat event data to the websocket server\n        input.value = \"\"; // clear the input\n    }\n    function addMessage(msg) {\n        output.innerHTML += msg + \"\u0026lt;br\u0026gt;\";\n    }\n    \u003c/pre\u003e\n                \u003cli\u003e\u003ch5\u003eGo\u003c/h5\u003e\u003c/li\u003e\n                \u003cpre\u003e\n    package main\n\n    import (\n        \"github.com/kataras/iris\"\n        \"github.com/kataras/iris/websocket\"\n        \"github.com/go-xorm/xorm\"\n    )\n\n    func setupWebsocket(app *iris.Application) {\n        // create our echo websocket server\n        ws := websocket.New(websocket.Config{\n            ReadBufferSize:  1024,\n            WriteBufferSize: 1024,\n        })\n        ws.OnConnection(handleConnection)\n        // register the server on an endpoint.\n        app.Get(\"/echo\", ws.Handler())\n        // see html script tags, this path is used.\n        app.Any(\"/iris-ws.js\", func(ctx iris.Context) {\n            ctx.Write(websocket.ClientSource)\n        })\n    }\n\n    func handleConnection(c websocket.Connection) {\n        c.On(\"chat\", func(msg string) {\n            // fmt.Printf(\"%s sent: %s\\n\", c.Context().RemoteAddr(), msg)\n            // Write message back to the client message owner with: c.Emit(\"消息名称\", msg)\n            // 返回所有人 websocket.All\n            // Write message to all except this client with:\n            c.To(websocket.Broadcast).Emit(\"消息名称\", msg)\n        })\n        c.OnDisconnect(func() {\n            //断开连接操作[...]\n        })\n    }\n    func main() {\n        setupWebsocket(app)\n    }\n    \u003c/pre\u003e\n            \u003c/ul\u003e\n            \u003cli\u003e\u003ch5\u003e官方的websocket\u003c/h5\u003e\u003c/li\u003e\n            \u003cli\u003e\u003ch5\u003e第三方websocket\u003c/h5\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        \u003ch4\u003e 模板\u003c/h4\u003e\n        \u003cul\u003e\n            \u003cli\u003e\u003ch5\u003e上下文视图数据\u003c/h5\u003e\u003c/li\u003e\n            \u003cpre\u003e\napp.Get(\"/路由\", func(ctx iris.Context) {\n        ctx.ViewData(\"Key\", \"Value\")\n        if err := ctx.View(\"index.html\"); err != nil {\n            //[...]\n        }\n})\n//HTML中使用｛｛.Key｝｝获取\n\u003c/pre\u003e\n            \u003cli\u003e\u003ch5\u003e嵌入模板\u003c/h5\u003e\u003c/li\u003e\n            \u003cpre\u003e\n//花括号为半角 因为用半角会自动翻译 所以这里用全角\n//layout页面中加入｛｛ yield ｝｝使用模板\n//HTML中使用｛｛funcName 参数｝｝使用函数 如下例中可使用 ｛｛ greet \"string\" ｝｝\n//｛｛ render \"路径\" ｝｝ 把别的html文件的内容拿过来\nfunc main() {\n    app := iris.New()\n    //全局模板 所有页面适用\n    tmpl := iris.HTML(\"./templates[html文件夹路径]\", \".html\")\n    tmpl.Layout(\"layouts/layout.html[layout文件路径]\")\n    tmpl.AddFunc(\"greet\", func(s string) string {\n        //[..]\n    })\n    tmpl.Binary(Asset, AssetNames) // \u0026lt;-- ####IMPORTANT\n    app.RegisterView(tmpl)\n    app.Get(\"/\", func(ctx iris.Context) {\n        if err := ctx.View(\"page1.html\"); err != nil {\n            ctx.StatusCode(iris.StatusInternalServerError)\n            ctx.Writef(err.Error())\n        }\n    })\n\n    // 不使用全局模板\n    app.Get(\"/nolayout\", func(ctx iris.Context) {\n        ctx.ViewLayout(iris.NoLayout)\n        if err := ctx.View(\"page1.html\"); err != nil {\n            ctx.StatusCode(iris.StatusInternalServerError)\n            ctx.Writef(err.Error())\n        }\n    })\n\n    // 局部模板 不受全局模板影响\n    my := app.Party(\"/my\").Layout(\"layouts/mylayout.html\") {\n        my.Get(\"/\", func(ctx iris.Context) {\n            ctx.View(\"page1.html\")\n        })\n        my.Get(\"/other\", func(ctx iris.Context) {\n            ctx.View(\"page2.html\")\n        })\n    }\n    app.Run(iris.Addr(\":8080\"))\n}\n\u003c/pre\u003e\n            \u003cli\u003e\u003ch5\u003ehero\u003c/h5\u003e\u003c/li\u003e\n            \u003cul\u003e\n                \u003cli\u003e\u003ch5\u003e官方文档 https://github.com/shiyanhui/hero/blob/master/README_CN.md\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003eiris中的实现\u003c/h5\u003e\u003c/li\u003e\n                \u003cp\u003e1. HTML中编写模板（语法见下）\u003c/p\u003e\n                \u003cp\u003e2. 命令行中进入%GOPATH%/bin 执行hero -source=\"模板所在文件夹\"\u003c/p\u003e\n                \u003cp\u003e3. main函数中\u003c/p\u003e\n                \u003cpre\u003e\n        //对于\u0026lt;%: func FuncName(变量名 []string, buffer *bytes.Buffer) %\u0026gt;\n        app.Get(\"/路由\", func(ctx iris.Context) {\n            var 变量名 = []string{\n                //变量值\n                //..\n            }\n            // Had better use buffer sync.Pool.\n            // Hero exports GetBuffer and PutBuffer for this.\n            //\n            // buffer := hero.GetBuffer()\n            // defer hero.PutBuffer(buffer)\n            buffer := new(bytes.Buffer)\n            template.FuncName(变量名, buffer)\n            if _, err := ctx.Write(buffer.Bytes()); err != nil {\n                log.Printf(\"ERR: %s\\n\", err)\n            }\n        })\n\n        \u003c/pre\u003e\n                \u003cpre\u003e\n        //对于\u0026lt;%: func FuncName(变量名 []string, w io.Writer) (int, error)%\u0026gt;\n        app.Get(\"/路由\", func(ctx iris.Context) {\n            var 变量名 = []string{\n                //\n            }\n            // using an io.Writer for automatic buffer management (i.e. hero built-in buffer pool),\n            // iris context implements the io.Writer by its ResponseWriter\n            // which is an enhanced version of the standard http.ResponseWriter\n            // but still 100% compatible.\n            template.UserListToWriter(FuncName, ctx)\n        })\n    \u003c/pre\u003e\n                \u003cli\u003e\u003ch5\u003e以下内容转自官方文档\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003eHero总共有九种语句，他们分别是：\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e函数定义语句 \u003ccode\u003e\u0026lt;%: func define %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n                \u003cul\u003e\n                    \u003cli\u003e\u003ch5\u003e该语句定义了该模板所对应的函数，如果一个模板中没有函数定义语句，那么最终结果不会生成对应的函数。\u003c/h5\u003e\u003c/li\u003e\n                    \u003cli\u003e\u003ch5\u003e该函数最后一个参数必须为\u003ccode\u003e*bytes.Buffer\u003c/code\u003e或者\u003ccode\u003eio.Writer\u003c/code\u003e, hero会自动识别该参数的名字，并把把结果写到该参数里。\u003c/h5\u003e\u003c/li\u003e\n                    \u003cli\u003e\u003ch5\u003e例:\u003c/h5\u003e\u003c/li\u003e\n                    \u003cul\u003e\n                        \u003cli\u003e\u003ch5\u003e\u003ccode\u003e\u0026lt;%: func UserList(userList []string, buffer *bytes.Buffer) %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n                        \u003cli\u003e\u003ch5\u003e\u003ccode\u003e\u0026lt;%: func UserList(userList []string, w io.Writer) %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n                        \u003cli\u003e\u003ch5\u003e\u003ccode\u003e\u0026lt;%: func UserList(userList []string, w io.Writer) (int, error) %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n                    \u003c/ul\u003e\n                \u003c/ul\u003e\n                \u003cli\u003e\u003ch5\u003e模板继承语句 \u003ccode\u003e\u0026lt;%~ \"parent template\" %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e该语句声明要继承的模板。\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e例: \u003ccode\u003e\u0026lt;%~ \"index.html\" \u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e模板include语句 \u003ccode\u003e\u0026lt;%+ \"sub template\" %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e该语句把要include的模板加载进该模板，工作原理和\u003ccode\u003eC++\u003c/code\u003e中的\u003ccode\u003e#include\u003c/code\u003e有点类似。\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e例: \u003ccode\u003e\u0026lt;%+ \"user.html\" \u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e包导入语句 \u003ccode\u003e\u0026lt;%! go code %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e该语句用来声明所有在函数外的代码，包括依赖包导入、全局变量、const等。\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e该语句不会被子模板所继承\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e例:\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cpre\u003ego\n        \u0026lt;%!\n            import (\n                    \"fmt\"\n                \"strings\"\n            )\n\n            var a int\n\n            const b = \"hello, world\"\n\n            func Add(a, b int) int {\n                return a + b\n            }\n\n            type S struct {\n                Name string\n            }\n\n            func (s S) String() string {\n                return s.Name\n            }\n        %\u0026gt;\n        \u003c/pre\u003e\n\n                \u003cli\u003e\u003ch5\u003e块语句 \u003ccode\u003e\u0026lt;%@ blockName { %\u0026gt; \u0026lt;% } %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e块语句是用来在子模板中重写父模中的同名块，进而实现模板的继承。\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e例:\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cpre\u003ehtml\n        \u0026lt;!DOCTYPE html\u0026gt;\n        \u0026lt;html\u0026gt;\n            \u0026lt;head\u0026gt;\n                \u0026lt;meta charset=\"utf-8\"\u0026gt;\n            \u0026lt;/head\u0026gt;\n\n            \u0026lt;body\u0026gt;\n                \u0026lt;%@ body { %\u0026gt;\n                \u0026lt;% } %\u0026gt;\n            \u0026lt;/body\u0026gt;\n        \u0026lt;/html\u0026gt;\n        \u003c/pre\u003e\n\n                \u003cli\u003e\u003ch5\u003eGo代码语句 \u003ccode\u003e\u0026lt;% go code %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e该语句定义了函数内部的代码部分。\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e例:\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cpre\u003ego\n        \u0026lt;% for _, user := userList { %\u0026gt;\n            \u0026lt;% if user != \"Alice\" { %\u0026gt;\n                \u0026lt;%= user %\u0026gt;\n            \u0026lt;% } %\u0026gt;\n        \u0026lt;% } %\u0026gt;\n\n        \u0026lt;%\n            a, b := 1, 2\n            c := Add(a, b)\n        %\u0026gt;\n        \u003c/pre\u003e\n\n                \u003cli\u003e\u003ch5\u003e原生值语句 \u003ccode\u003e\u0026lt;%==[t] variable %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e该语句把变量转换为string。\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003et\u003c/code\u003e是变量的类型，hero会自动根据\u003ccode\u003et\u003c/code\u003e来选择转换函数。\u003ccode\u003et\u003c/code\u003e的待选值有:\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003eb\u003c/code\u003e: bool\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003ei\u003c/code\u003e: int, int8, int16, int32, int64\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003eu\u003c/code\u003e: byte, uint, uint8, uint16, uint32, uint64\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003ef\u003c/code\u003e: float32, float64\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003es\u003c/code\u003e: string\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003ebs\u003c/code\u003e: []byte\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003ev\u003c/code\u003e: interface\u003c/h5\u003e\u003c/li\u003e\n\n                注意：\n                \u003cli\u003e\u003ch5\u003e如果\u003ccode\u003et\u003c/code\u003e没有设置，那么\u003ccode\u003et\u003c/code\u003e默认为\u003ccode\u003es\u003c/code\u003e.\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e最好不要使用\u003ccode\u003ev\u003c/code\u003e，因为其对应的转换函数为\u003ccode\u003efmt.Sprintf(\"%v\", variable)\u003c/code\u003e，该函数很慢。\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e例:\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cpre\u003ego\n        \u0026lt;%== \"hello\" %\u0026gt;\n        \u0026lt;%==i 34  %\u0026gt;\n        \u0026lt;%==u Add(a, b) %\u0026gt;\n        \u0026lt;%==s user.Name %\u0026gt;\n        \u003c/pre\u003e\n\n                \u003cli\u003e\u003ch5\u003e转义值语句 \u003ccode\u003e\u0026lt;%= statement %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cli\u003e\u003ch5\u003e该语句把变量转换为string后，又通过\u003ccode\u003ehtml.EscapesString\u003c/code\u003e记性转义。\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e\u003ccode\u003et\u003c/code\u003e跟上面原生值语句中的\u003ccode\u003et\u003c/code\u003e一样。\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e例:\u003c/h5\u003e\u003c/li\u003e\n\n                \u003cpre\u003ego\n        \u0026lt;%= a %\u0026gt;\n        \u0026lt;%= a + b %\u0026gt;\n        \u0026lt;%= Add(a, b) %\u0026gt;\n        \u0026lt;%= user.Name %\u0026gt;\n        \u003c/pre\u003e\n                \u003cli\u003e\u003ch5\u003e注释语句 \u003ccode\u003e\u0026lt;%# note %\u0026gt;\u003c/code\u003e\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e该语句注释相关模板，注释不会被生成到go代码里边去。\u003c/h5\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ch5\u003e例: \u003ccode\u003e\u0026lt;# 这是一个注释 \u0026gt;\u003c/code\u003e.\u003c/h5\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/ul\u003e\n        \u003ch4\u003e mvc\u003c/h4\u003e\n        \u003ch4\u003e 认证框架\u003c/h4\u003e\n        \u003ch4\u003e 文件上传\u003c/h4\u003e\n        \u003ch4\u003e 测试\u003c/h4\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\u003ch3 id=\"Spring\"\u003eSpring\u003c/h3\u003e\n\u003cul class=\"list-unstyled\"\u003e\n    \u003cul\u003e\n        \u003cli\u003eSpring配置\u003c/li\u003e\n        \u003cli\u003ebean实例化\u003c/li\u003e\n        \u003cli\u003e属性注入\u003c/li\u003e\n        \u003cli\u003e注解操作\u003c/li\u003e\n        \u003cli\u003eAOP\u003c/li\u003e\n        \u003cli\u003ejdbcTemplate\u003c/li\u003e\n        \u003cli\u003e监听器\u003c/li\u003e\n        \u003cli\u003eSSH整合\u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n    \u003cp\u003e 开源轻量级框架\u003c/p\u003e\n    \u003cp\u003e  核心：AOP、IOC\u003c/p\u003e\n    \u003cp\u003e 一站式框架\u003c/p\u003e\n    \u003cp\u003e  Spring5.0.3\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch4\u003eSpring配置:\u003c/h4\u003e\n\u003cpre\u003e\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt;\n\u0026lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\"\n    xmlns:tx=\"http://www.springframework.org/schema/tx\"\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\"\n        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"\u0026gt; \u0026lt;!-- bean definitions here --\u0026gt;\n    \u0026lt;context:component-scan base-package=\"扫描的包名\"\u0026gt;\u0026lt;/context:component-scan\u0026gt;\n    \u0026lt;aop:aspectj-autoproxy\u0026gt;\u0026lt;/aop:aspectj-autoproxy\u0026gt;\n\u0026lt;/beans\u0026gt;\nweb.xml\n\u0026lt;context-param\u0026gt;\n    \u0026lt;param-name\u0026gt;contextConfigLocation\u0026lt;/param-name\u0026gt;\n    \u0026lt;param-value\u0026gt;classpath:applicationContext.xml\u0026lt;/param-value\u0026gt;\n\u0026lt;/context-param\u0026gt;\n\u0026lt;listen\u0026gt;\n    \u0026lt;listen-class\u0026gt;org.springframework.web.context.ContextLoaderListener\u0026lt;/listen-class\u0026gt;\n\u0026lt;/listen\u0026gt;\u003c/pre\u003e\n\u003ch4\u003e bean实例化:\u003c/h4\u003e\n\u003cul\u003e\n    \u003cli\u003e\u003ch5\u003e无参构造√:\u003c/h5\u003e  \n        \u003cpre\u003e\n\u0026lt;bean id=\"名称\" class=\"全路径\"\u0026gt;\u0026lt;/bean\u0026gt;   //不含特殊符号 name属性可以加特殊符号\n//scope singletou 默认,单实例 prototype多实例\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ch5\u003e静态工厂:\u003c/h5\u003e  \n        \u003cpre\u003e\n静态工厂类里\npublic static Bean getBean() {\n    return new Bean();\n}\n\u0026lt;bean id=\"名称\" class=\"全路径\" factory-method=\"getBean\"\u0026gt;\u0026lt;/bean\u0026gt;  \n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\n        \u003ch5\u003e实例工厂：\u003c/h5\u003e\n        \u003cpre\u003e\n实例工厂类里  \npublic Bean getBean() {\n    return new Bean();\n}\n\u0026lt;bean id=\"工厂类名\" class=\"全路径\"\u0026gt;\u0026lt;/bean\u0026gt;\n\u0026lt;bean id=\"名称\" factory-bean=\"工厂类名\" factory-method=\"getBean\"\u0026gt;\u0026lt;/bean\u0026gt;  \n\u003c/pre\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e属性注入 :\u003c/h4\u003e\n\u003cul\u003e\n    \u003cli\u003e\u003ch5\u003e有参构造注入\u003c/h5\u003e\n        \u003cpre\u003e\n\u0026lt;bean id=\"名称\" class=\"全路径\"\u0026gt;\n    \u0026lt;constructor-arg name=\"属性名\" value=\"值\"\u0026gt;\u0026lt;/constructor-arg\u0026gt;\n\u0026lt;/bean\u0026gt;  \n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ch5\u003eset注入√\u003c/h5\u003e  \n        \u003cpre\u003e\n\u0026lt;bean id=\"名称\" class=\"全路径\"\u0026gt;\n    \u0026lt;property name=\"属性名\" value=\"值\"\u0026gt;\u0026lt;/property\u0026gt;\n\u0026lt;/bean\u0026gt;  \n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ch5\u003e注入对象属性\u003c/h5\u003e\n        \u003cpre\u003e\nservice类里加入set方法\n\u0026lt;bean id=\"名称\" class=\"DAO类全路径\"\u0026gt;\u0026lt;/bean\u0026gt;  \n\u0026lt;bean id=\"名称\" class=\"service类全路径\"\u0026gt;\n    \u0026lt;property name=\"set的属性名\" ref=\"名称\"\u0026gt;\u0026lt;/proterty\u0026gt;\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ch5\u003ep名称空间注入\u003c/h5\u003e  \n        \u003cpre\u003e\nxmlns:p=\"http://www.springframework.org/schema/p\"\n\u0026lt;bean id=\"名称\" class=\"DAO全路径\" p:属性名=\"属性值\"\u0026gt;\u0026lt;/p\u0026gt;\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ch5\u003e数组/Map/List注入\u003c/h5\u003e  \n        \u003cpre\u003e\n\u0026lt;bean id=\"名称\" class=\"全路径\"\u0026gt;\n    \u0026lt;property name=\"属性名\"\u0026gt;\n    \u0026lt;list/map\u0026gt;\n        \u0026lt;value\u0026gt;...\u0026lt;/value\u0026gt;\n        //\u0026lt;entry key=\"\" value=\"\"\u0026gt;\u0026lt;/entry\u0026gt;\n    \u0026lt;list/map\u0026gt;\n    \u0026lt;/property\u0026gt;  \n\u0026lt;/bean\u0026gt;\n\u003c/pre\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e注解操作:\u003c/h4\u003e\n\u003cul\u003e\n    \u003cli\u003e注解创建对象\n        \u003cpre\u003e\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt;\n\u0026lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"\u0026gt; \u0026lt;!-- bean definitions here --\u0026gt;\n    \u0026lt;context:component-scan base-package=\"\"\u0026gt;\u0026lt;/context:component-scan\u0026gt;\n\u0026lt;/beans\u0026gt;\n@Component(value=\"名称\")  \n类 \n@Controller 表述层  @Service 业务逻辑层  @Respository  数据访问层  \n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e注解注入属性\n        \u003cpre\u003e\n@Autowired\nprivate 类 对象;  \n或\n@Resource(name=\"要引用的对象的Component里的value值\");  \n\u003c/pre\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\nBean用来创建对象 注解用来注入属性\n\u003cpre\u003e\n\u0026lt;bean id=\"名称\" class=\"被作为属性的对象的类的全路径\"\u0026gt;\u0026lt;/bean\u0026gt;  \n@Resource(name=\"名称\")\nprivate 类 对象名;\n\u003c/pre\u003e\n\u003ch4\u003eAOP:\u003c/h4\u003e\n\u003cul\u003e\n    \u003cli\u003exml配置\n        \u003cpre\u003e\n\u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt;\n\u0026lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:aop=\"http://www.springframework.org/schema/aop\" xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\"\u0026gt; \u0026lt;!-- bean definitions here --\u0026gt;\n\u0026lt;bean id=\"名称\" class=\"增强的类\"\u0026gt;\u0026lt;/bean\u0026gt;  \n\u0026lt;bean id=\"名称\" class=\"被增强的类\"\u0026gt;\u0026lt;/bean\u0026gt;  \n\u0026lt;aop:config\u0026gt;\n    \u0026lt;aop:pointcut expression=\"execution(* 包.被增强方法(..))\" id=\"名称\"/\u0026gt;\n    \u0026lt;aop:aspect ref=\"增强的类名称\"\u0026gt;\n        \u0026lt;aop:类型(before/after-returning/around) method=\"增强方法名\"/ pointcut-ref=\"被增强方法(切入点)名称\"\u0026gt;  \n    \u0026lt;/aop:aspect\u0026gt;\n\u0026lt;/aop:config\u0026gt;\n\u0026lt;/beans\u0026gt;\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e注解\n        \u003cpre\u003e\n\u0026lt;bean ...\u0026gt;\n\u0026lt;aop:aspectj-autoproxy\u0026gt;\u0026lt;/aop:aspectj-autoproxy\u0026gt;\n@Aspect\npublic class 增强类{\n    @类型(value=\"execution(* 被增强类.切入点())\")\n    public void 增强方法(){\n        ...\n    }\n}\n\u003c/pre\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n//环绕 proceedingJoinPoint.proceed();  \n\u003ch4\u003ejdbcTemplate\u003c/h4\u003e\n\u003cul\u003e\n    \u003cli\u003e增删改\n        \u003cpre\u003e\nDriverManagerDataSource dataSource = new DriverManagerDataSource();\ndataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\ndataSource.setUrl(\"jdbc:mysql:///库\");\ndataSource.setUsername(\"\");\ndataSource.setPassword(\"\");\nJdbcTemplate jdbcTemplate = new JdbcTemplate(dataSouce);\nString sql = \"xxx ? xxx\"\nint rows = jdbcTemplate.update(sql,\"value\");\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e查询\n        \u003cul\u003e\n            \u003cli\u003e返回一个值\n                \u003cpre\u003e\n    int num = jdbcTemplate.queryForObject(sql,Integer.class);\n  \u003c/pre\u003e\n            \u003c/li\u003e\n            \u003cli\u003e返回一个对象\n                \u003cpre\u003e\n    Entity Entity_name = jdbcTemplate.queryForObject(sql,new MyRowMapper(),\"value\");\n    class MyRowMapper implements RowMapper\u0026lt;Entity\u0026gt;{\n    重写mapRow{\n        re.getString......;\n        Entity Entity_name = new Entity();\n        set........;\n        return Entity;\n        }\n     }\n   \u003c/pre\u003e\n            \u003c/li\u003e\n            \u003cli\u003e返回一个List\n                \u003cpre\u003e\n    List\u0026lt;Entity\u0026gt; list = jdbcTemplate.query(sql,new MyRowMapper());\n  \u003c/pre\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e连接池\n        \u003cpre\u003e\n\u0026lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"\u0026gt;\n    \u0026lt;property name=\"driverClass\" value=\"com.mysql.jdbc.Driver\"\u0026gt;\u0026lt;/property\u0026gt;\n    \u0026lt;property name=\"jdbcUrl\" value=\"jdbc:mysql:///库\"\u0026gt;\u0026lt;/property\u0026gt;\n    \u0026lt;property name=\"user\" value=\"\"\u0026gt;\u0026lt;/property\u0026gt;\n    \u0026lt;property name=\"password\" value=\"\"\u0026gt;\u0026lt;/property\u0026gt;\n\u0026lt;/bean\u0026gt;\n//Service注入DAO\n//DAO注入jdbcTemplate\n//jdbcTemplate注入连接池\n\u0026lt;bean id=\"jdbcTemplate\" class=\"org.springframework.jdbc.core.JdbcTemplate\"\u0026gt;\n\u0026lt;property name=\"dataSource\" ref=\"dataSource\"\u0026gt;\u0026lt;/property\u0026gt;\n\u0026lt;/beans\u0026gt;\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e事务\n        \u003cul\u003e\n            \u003cli\u003e配置\n                \u003cpre\u003e\n    \u0026lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"\u0026gt;\n    \u0026lt;property name=\"dataSource\" ref=\"dataSource\"\u0026gt;\u0026lt;/property\u0026gt;\n    \u0026lt;/bean\u0026gt;\n    \u0026lt;tx:advice id=\"txadvice\" transaction-manager=\"transactionManager\"\u0026gt;\n        \u0026lt;tx:attributes\u0026gt;\n            \u0026lt;tx:method name=\"xxx*\" propagation=\"REQUIRED\"/\u0026gt;\n        \u0026lt;/tx:attributes\u0026gt;\n    \u0026lt;/tx:adbice\u0026gt;\n    \u0026lt;aop:config\u0026gt;\n        \u0026lt;aop:pointcut expression:\"execution(* 类.切入点(..))\" id=\"pointcut\"\u0026gt;\n        \u0026lt;aop:advisor advice-ref=\"txadvice\" pointcut-ref=\"pointcut\"/\u0026gt;\n    \u0026lt;/aop:config\u0026gt;\n  \u003c/pre\u003e\n            \u003c/li\u003e\n            \u003cli\u003e注解\n                \u003cpre\u003e\n    \u0026lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"\u0026gt;\n    \u0026lt;property name=\"dataSource\" ref=\"dataSource\"\u0026gt;\u0026lt;/property\u0026gt;\n    \u0026lt;/bean\u0026gt;\n    \u0026lt;tx:annotation-driven transaction-manager=\"transactionManager\"/\u0026gt;\n    @Transactional\n    public class Service类{\n    }\n  \u003c/pre\u003e\n            \u003c/li\u003e\n        \u003c/ul\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003e监听器:\u003c/h4\u003e\n\u003cpre\u003e\n\u0026lt;context-param\u0026gt;\n    \u0026lt;param-name\u0026gt;contextConfigLocation\u0026lt;/param-name\u0026gt;\n    \u0026lt;param-value\u0026gt;classpath:配置文件路径\u0026lt;/param-value\u0026gt;\n\u0026lt;/context-param\u0026gt;  \n\u0026lt;listen\u0026gt;\n    \u0026lt;listen-class\u0026gt;org.springframework.web.context.ContextLoaderListener\u0026lt;/listen-class\u0026gt;\n\u0026lt;/listen\u0026gt;\n\u003c/pre\u003e\n\u003ch4\u003eSSH框架整合\u003c/h4\u003e\n\u003cul\u003e\n    \u003cli\u003eStruts2 整合 Spring\n        \u003cpre\u003e\nspring中\n\u0026lt;bean id=\"\" class=\"类全路径\" scope=\"prototype\"\u0026gt;\nStruts2中\n\u0026lt;action name=\"\" class=\"beanid\"\u0026gt;\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003eSpring 整合 Hibernate\n        \u003cpre\u003e\nHibernate内连接配置可以去掉\n\u0026lt;bean id=\"sessionFactory\" class=\"org.springframework.orm.hibernate5.LocalSessionFactoryBean\"\u0026gt;\n    \u0026lt;property name=\"dataSource\" ref=\"dataSource\"\u0026gt;\u0026lt;/property\u0026gt;\n    \u0026lt;property name=\"configLocations\" value=\"classpath:hibernate.cfg.xml\"\u0026gt;\u0026lt;/property\u0026gt;\n\u0026lt;/bean\u0026gt;\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003eHibernate Template\n        \u003cpre\u003e\n\u0026lt;bean id=\"Dao\" class=\"Dao类\"\u0026gt;\n    \u0026lt;property name=\"hibernateTemplate\" ref=\"hibernateTemplate\"\u0026gt;\n\u0026lt;/bean\u0026gt;\n\u0026lt;bean id=\"hibernateTemplate\" class=\"org.springframework.orm.hibernate5.HibernateTemplate\"\u0026gt;\n    \u0026lt;property name=\"sessionFactory\" ref=\"sessionFactory\"\u0026gt;\u0026lt;/property\u0026gt;\n\u0026lt;/bean\u0026gt;\n\u0026lt;bean id=\"transactionManager\" class=\"org.springframework.orm.hibernate5.HibernateTransactionManager\"\u0026gt;\n    \u0026lt;property name=\"sessionFactory\" ref=\"sessionFactory\"\u0026gt;\u0026lt;/property\u0026gt;\n\u0026lt;/bean\u0026gt;\n\u0026lt;tx:annotation-driven  transaction-manager=\"transactionManager\"\u0026gt;\n@Transactional\nService类{\n}\n\u003c/pre\u003e\n        \u003cpre\u003e\nget方法(根据id查询)\nEntity Entity_name = hibernateTemplate.get(Entity.class,id);\nfind方法(条件查询)\nList\u0026lt;Entity\u0026gt; list = (List\u0026lt;Entity\u0026gt;) hibernateTemplate.find(HQL,value);\n分页查询\nhibernateTemplate.findByCriteria(DetachedCriteria criteria,firstResult,maxResults)\n\u003c/pre\u003e\n    \u003c/li\u003e\n    \u003cli\u003e分模块\n        \u003cpre\u003e\n\u0026lt;import resource=\"classpath:xxx.xml\"/\u0026gt;\n\u003c/pre\u003e\n    \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\u003cdiv\u003e\n    \u003ch2 id=\"Hibernate\"\u003eHibernate 框架\u003c/h2\u003e\n    \u003ch3\u003eHibernate\u003c/h3\u003e\n    \u003cul\u003e\n        \u003cli\u003e实体类\u003c/li\u003e\n        \u003cli\u003e配置\u003c/li\u003e\n        \u003cli\u003e实现\u003c/li\u003e\n        \u003cli\u003eCRUD\u003c/li\u003e\n        \u003cli\u003e事务\u003c/li\u003e\n        \u003cli\u003e绑定session\u003c/li\u003e\n        \u003cli\u003e查询\u003c/li\u003e\n        \u003cli\u003e一对多\u003c/li\u003e\n        \u003cli\u003e多对多\u003c/li\u003e\n        \u003cli\u003e查询(深入)\u003c/li\u003e\n    \u003c/ul\u003e\n    \u003cblockquote\u003e\n        \u003cp\u003e数据访问层框架\u003c/p\u003e\n        \u003cp\u003eHibernate 5.2.12\u003c/p\u003e\n    \u003c/blockquote\u003e\n    \u003ch4\u003e实体类:\u003c/h4\u003e\n    \u003cpre\u003e\n          Public class 表名{\n            private 类型 属性名;\n            ....\n            get函数;\n            ....\n            set函数;\n            ....\n          }\n        \u003c/pre\u003e\n    \u003ch4\u003e映射配置:\u003c/h4\u003e\n    \u003cpre\u003e\n          \u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt;  \n          \u0026lt;!DOCTYPE hibernate-mapping PUBLIC\n            \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n            \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"\u0026gt;\n        \u0026lt;hibernate-mapping\u0026gt;\n            \u0026lt;class name=\"实体类全路径\" table=\"表名\"\u0026gt;  \n                \u0026lt;id name=\"主键属性名\" column=\"主键字段名\"\u0026gt;  \n                    \u0026lt;generator class=\"\"\u0026gt;\u0026lt;/generator\u0026gt;  \n                \u0026lt;/id\u0026gt;\n                \u0026lt;property name=\"属性名\" column=\"字段名\"\u0026gt;\u0026lt;/property\u0026gt;  \n            \u0026lt;/class\u0026gt;\n        \u0026lt;/hibernate-mapping\u0026gt;\n        \u0026lt;xml-body\u0026gt;\n        \u0026lt;/xml-body\u0026gt;\n\n        generator: increment / identity / sequence / native(√) / uuid(String) / assigned\n        \u003c/pre\u003e\n    \u003ch4\u003e 核心配置:\u003c/h4\u003e\n    \u003cpre\u003e\n          \u0026lt;?xml version=\"1.0\" encoding=\"UTF-8\"?\u0026gt;\n          \u0026lt;!DOCTYPE hibernate-configuration PUBLIC\n            \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\n            \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"\u0026gt;\n          \u0026lt;hibernate-configuration\u0026gt;\n            \u0026lt;session-factory\u0026gt;\n                \u0026lt;property name=\"hibernate.connection.driver_class\"\u0026gt;com.mysql.jdbc.Driver\u0026lt;/property\u0026gt;\n                \u0026lt;property name=\"hibernate.connection.url\"\u0026gt;jdbc:mysql://localhost:3306/\u0026lt;/property\u0026gt;\n                \u0026lt;property name=\"hibernate.connection.username\"\u0026gt;root\u0026lt;/property\u0026gt;\n                \u0026lt;property name=\"hibernate.connection.password\"\u0026gt;\u0026lt;/property\u0026gt;\n                \u0026lt;property name=\"hibernate.show_sql\"\u0026gt;true\u0026lt;/property\u0026gt;\n                \u0026lt;property name=\"hibernate.format_sql\"\u0026gt;true\u0026lt;/property\u0026gt;\n                \u0026lt;property name=\"hibernate.hbm2ddl.auto\"\u0026gt;update\u0026lt;/property\u0026gt;\n                \u0026lt;property name=\"hibernate.dialect\"\u0026gt;org.hibernate.dialect.MySQLDialect\u0026lt;/property\u0026gt;\n                \u0026lt;mapping resource=\"entity\\userdata.hbm.xml\"/\u0026gt;\n            \u0026lt;/session-factory\u0026gt;\n          \u0026lt;/hibernate-configuration\u0026gt;\n          \u0026lt;xml-body\u0026gt;\n\n          \u0026lt;/xml-body\u0026gt;\n        \u003c/pre\u003e\n    \u003ch4\u003e实现：\u003c/h4\u003e\n    \u003cpre\u003e\n          Configuration cfg = new Configuration();\n          cfg.configure();\n          SessionFactory sessionFactory = cfg.buildSessionFactory();\n          Session session = sessionFactory.openSession();\n          Transaction tx = session.beginTransaction();\n          //功能\n          userdata userdata = new userdata();\n          session.save(userdata);\n          //\n          tx.commit();\n          session.close();\n          sessionFactory.close();\n        \u003c/pre\u003e\n    \u003ch4\u003e查找操作:\u003c/h4\u003e\n    \u003cpre\u003e\n        //Configuration cfg = new Configuration();\n        //cfg.configure();\n        //SessionFactory sessionFactory = cfg.buildSessionFactory();\n        SessionFactory sessionFactory = HibernateUtils.getSessionFactory();\n        Session session = sessionFactory.openSession();\n        Transaction tx = session.beginTransaction();\n        //get语句\n        userdata userdata = session.get(userdata.class,记录主键值);\n        //输出 System.out.println.........\n        tx.commit();\n        session.close();\n        //sessionFactory.close();\n        \u003c/pre\u003e\n    \u003ch4\u003e 修改操作:\u003c/h4\u003e\n    \u003cpre\u003e\n        userdata userdata = session.get(userdata.class,记录主键值);\n        userdata.set属性名(记录值);\n        session.update(userdata);\n        \u003c/pre\u003e\n    \u003ch4\u003e 删除操作: \u003c/h4\u003e\n    \u003cpre\u003e\n        userdata userdata = session.get(userdata.class,记录主键值);\n        session.delete(userdata);\n        \u003c/pre\u003e\n    \u003ch4\u003e事务:\u003c/h4\u003e\n    \u003cpre\u003e\n        SessionFactory  sessionfactory = null;\n        Session session = null;\n        Transaction tx = null;\n        try{\n            sessionfactory = HibernateUtils.getSessionFactory();\n            session = sessionfactory.openSession();\n            tx = session.beginTransaction();\n            //  \n            tx.commit();\n        }catch(Exception e){\n            tx.rollback();\n        }finally{\n             session.close();\n        }\n        \u003c/pre\u003e\n    \u003ch4\u003e绑定session:\u003c/h4\u003e\n    \u003cpre\u003e\n        \u0026lt;property name=\"hibernate.current_session_context_class\"\u0026gt;thread\u0026lt;/property\u0026gt;\n        public static Session getSessionobject() {\n                return sessionFactory.getCurrentSession();\n            }\n        Session session = HibernateUtils.getSessionobject();\n        \u003c/pre\u003e\n    \u003ch4\u003e查询\u003c/h4\u003e \n    \u003cul\u003e\n        \u003cli\u003eQuery:\n            \u003cpre\u003e\n        Query query = session.createQuery(HQL(from userdata));\n        List\u0026lt;userdata\u0026gt; list = query.list();\n        遍历\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003eCriteria:  \n            \u003cpre\u003e\n        Criteria criteria = session.createCriteria(userdata.class);\n        List\u0026lt;userdata\u0026gt; list = criteria.list();\n        遍历\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003eSQLQuery:\n            \u003cpre\u003e\n        SQLQuery sqlQuery = session.createSQLQuery(SQL(select * from userdata));\n        //List\u0026lt;Object[]\u0026gt; list = sqlQuery.list();\n        //遍历(数组)\n        sqlQuery.addEntity(userdata.class);\n        List\u0026lt;userdata\u0026gt; list = sqlQuery.list();\n        遍历\n        \u003c/pre\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n    \u003ch4\u003e一对多:\u003c/h4\u003e\n    \u003cul\u003e\n        \u003cli\u003e映射:  \n            \u003cpre\u003e\n        Entity1一对多Entity2:\n        Entity1中\n        private set\u0026lt;Entity2\u0026gt; Entity2_name = new HashSet\u0026lt;Entity2\u0026gt;();\n        get()....set().....\n        Entity2中\n        private Entity1 Entity1_name;\n        get()...set...\n        Entity1.hbm.xml中  \n        \u0026lt;set name=\"Entity2_name\"\u0026gt;\n        \u0026lt;key column=\"外键名\"\u0026gt;\u0026lt;/key\u0026gt;\n        \u0026lt;one-to-many class=\"Entity2全路径\"/\u0026gt;\n        \u0026lt;/set\u0026gt;\n        Entity2.hbm.xml中\n        \u0026lt;many-to-one name=\"Entity1_name\" class=\"Entity1全路径\" column=\"外键名\"\u0026gt;\u0026lt;/many-to-one\u0026gt;\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e级联保存:  \n            \u003cpre\u003e\n        Entity1_name.getSetEntity2().add(Entity2_name1);\n        Entity1_name.getSetEntity2().add(Entity2_name2);\n        Entity2_name1.setEntity1(Entity1_name);\n        Entity2_name2.setEntity1(Entity1_name);\n        session.save(Entity1_name);\n        session.save(Entity2_name1);\n        session.save(Entity2_name2);  \n        或者\n        Entity1.hbm.xml中\n        set标签内添加 cascade=\"save-update\"\n        Entity1_name.getSetEntity2().add(Entity2_name1);\n        Entity1_name.getSetEntity2().add(Entity2_name2);\n        session.save(Entity1_name);\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e级联删除:  \n            \u003cpre\u003e\n        cascade加入delete\n        session.delete(Entity1_name);\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e修改:  \n            \u003cpre\u003e\n        Entity1.hbm.xml中\n        set标签内添加 inverse=\"false\"\n        Entity1_name.getsetEntity2().add(Entity2_name);\n        Entity2_name.setEntity1(Entity1_name);\n        \u003c/pre\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n    \u003ch4\u003e多对多:\u003c/h4\u003e\n    \u003cul\u003e\n        \u003cli\u003e映射:  \n            \u003cpre\u003e\n        Entity1中\n        private set\u0026lt;Entity2\u0026gt; Entity2_name = new HashSet\u0026lt;Entity2\u0026gt;();\n        get()....set().....\n        Entity2中\n        private set\u0026lt;Entity1\u0026gt; Entity1_name = new HashSet\u0026lt;Entity1\u0026gt;();\n        get()....set().....\n        Entity1.hbm.xml中  \n        \u0026lt;set name=\"Entity2_name\" table=\"维护的表名\"\u0026gt;  \n        \u0026lt;key column=\"Entity1外键名\"\u0026gt;\u0026lt;/key\u0026gt;\n        \u0026lt;many-to-many class=\"Entity2全路径\" column=\"Entity2外键名\"/\u0026gt;\n        \u0026lt;/set\u0026gt;\n        Entity2.hbm.xml中\n        \u0026lt;set name=\"Entity1_name\" table=\"维护的表名\"\u0026gt;  \n        \u0026lt;key column=\"Entity2外键名\"\u0026gt;\u0026lt;/key\u0026gt;\n        \u0026lt;many-to-many class=\"Entity1全路径\" column=\"Entity1外键名\"/\u0026gt;\n        \u0026lt;/set\u0026gt;\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e级联保存:  \n            \u003cpre\u003e\n        若要用Entity1保存Entity2\n        Entity1.hbm.xml中  \n        set标签内添加 cascade=\"save-update\"\n        Entity1_name1.getSetEntity2().add(Entity2_name1);\n        Entity1_name1.getSetEntity2().add(Entity2_name2);\n        Entity1_name2.getSetEntity2().add(Entity2_name2);\n        Entity1_name2.getSetEntity2().add(Entity2_name3);\n        session.save(Entity1_name1);\n        session.save(Entity1_name2);\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e级联删除:  \n            \u003cpre\u003e\n        //一般不用,也用不到\n        cascade加入delete  \n        session.delete(Entity1_name1);\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e维护第三张表:  \n            \u003cpre\u003e\n        Entity1和Entity2相关联\n        Entity1_name.getsetEntity2().add(Entity2_name);  \n        Entity1和Entity2取消关联  \n        Entity1_name.getsetEntity2().remove(Entity2_name);  \n        \u003c/pre\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n    \u003ch4\u003e查询:\u003c/h4\u003e\n    \u003cul\u003e\n        \u003cli\u003e对象导航查询:  \n            \u003cpre\u003e\n        Set\u0026lt;Entity2\u0026gt; Entity2_name = Entity1_name.getSetEntity2();\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003eOID查询:  \n            \u003cpre\u003e\n        Entity Entity_name = session.get(Entity.class,记录主键值);\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003eHQL查询:  \n            \u003cpre\u003e\n        Query query = session.createQuery(HQL);\n        query.setParameter(位置,值);\n        List\u0026lt;userdata\u0026gt; list = query.list();\n        遍历\n        条件查询 from 实体类名 where 实体类属性 = ?\n        条件查询 from 实体类名 where 实体类属性 like ?  \n        排序查询 freom 实体类名 order by 实体类属性 asc/desc  \n        分页查询 query.setFirstResult(第一条记录);query.setMaxResults(记录数);  \n        投影查询 select 实体类属性 from  \n        聚集函数 select 聚集函数 from...hving.. ...  Object obj = query.uniqueResult(); 遍历obj  \n        连接查询 from Entity1 e inner join e.setEntity2 ... List list = query.list();\n        迫切连接 from Entity1 e inner join fetch e.setEntity2 ... List list = query.list();\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003eQBC查询:  \n            \u003cpre\u003e\n        Criteria criteria = session.createCriteria(Entity.class);\n        List\u0026lt;Entity\u0026gt; list = criteria.list();\n        遍历\n        条件查询 criteria.add(Restrictions.方法(属性名,值));\n        排序查询 criteria.addOrder(Order.方法(属性名));\n        分页查询 criteria.setFirstResult(第一条记录);criteria.setMaxResults(记录数);\n        统计查询 criteria.setProjection(Projection.rowCount());Object obj = criteria.uniqueResult();\n        离线查询 \n        DetachedCriteria detachedcriteria = DetachedCriteria.forClass(Entity.class);\n        Criteria criteria = detachedcriteria.getExecutableCriteria(session);  \n        批量抓取 set加入batch-size=\"10\"标签\n        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e本地SQL查询:  \n            \u003cpre\u003e\n        ...\n        \u003c/pre\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\u003cdiv\u003e\n    \u003ch2 id=\"Struts2\"\u003eStruts2 框架\u003c/h2\u003e\n    \u003cul\u003e\n        \u003cli\u003e配置\u003c/li\u003e\n        \u003cli\u003e创建action\u003c/li\u003e\n        \u003cli\u003e方法访问\u003c/li\u003e\n        \u003cli\u003e全局结果页面配置\u003c/li\u003e\n        \u003cli\u003e获取表单\u003c/li\u003e\n        \u003cli\u003e操作域对象\u003c/li\u003e\n        \u003cli\u003e封装到实体类\u003c/li\u003e\n        \u003cli\u003e值栈\u003c/li\u003e\n        \u003cli\u003e拦截器\u003c/li\u003e\n    \u003c/ul\u003e\n    \u003cblockquote\u003e\n        \u003cp\u003e表述层框架\u003c/p\u003e\n        \u003cp\u003estruts-2.5.14\u003c/p\u003e\n    \u003c/blockquote\u003e\n    \u003ch4\u003e配置 :\u003c/h4\u003e\n    \u003cpre\u003e\n                配置过滤器\n                \u0026lt;filter\u0026gt;\n                    \u0026lt;filter-name\u0026gt;struts2\u0026lt;/filter-name\u0026gt;\n                    \u0026lt;filter-class\u0026gt;org.apache.struts2.dispatcher.filter.StrutsPrepareAndExecuteFilter\u0026lt;/filter-class\u0026gt;\n                \u0026lt;/filter\u0026gt;\n                \u0026lt;filter-mapping\u0026gt;\n                    \u0026lt;filter-name\u0026gt;struts2\u0026lt;/filter-name\u0026gt;\n                    \u0026lt;url-pattern\u0026gt;/*\u0026lt;/url-pattern\u0026gt;\n                \u0026lt;/filter-mapping\u0026gt;\n                struts.xml  \n                \u0026lt;!DOCTYPE struts PUBLIC\n                        \"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN\"\n                        \"http://struts.apache.org/dtds/struts-2.5.dtd\"\u0026gt;\n                 \u0026lt;struts\u0026gt;\n                         \u0026lt;package name=\"用于区分的名称\" extends=\"struts-default\" namespace=\"/\"\u0026gt;\u0026lt;!-- namespace+actionname 构成访问路径 --\u0026gt;\n                                 \u0026lt;action name=\"访问名称\" class=\"类全路径\" method=\"默认为execute方法\"\u0026gt;\n                                         \u0026lt;result name=\"返回值\" type=\"默认为转发(dispatcher)chain/redirect/redirectAction\"\u0026gt;/返回页面\u0026lt;/result\u0026gt;\n                                 \u0026lt;/action\u0026gt;\n                         \u0026lt;/package\u0026gt;\n                 \u0026lt;/struts\u0026gt;\n                 编码: \u0026lt;constant name=\"struts.i18n.encoding\" value=\"UTF-8\"\u0026gt;\u0026lt;/constant\u0026gt;\n                 分模块 \u0026lt;include file=\"全路径\"\u0026gt;\u0026lt;/include\u0026gt;\n                \u003c/pre\u003e\n    \u003ch4\u003e创建action:\u003c/h4\u003e\n    \u003cul\u003e\n        \u003cli\u003e1.\n            \u003cpre\u003e\n                public class 名称 {\n                public String execute() {\n                        return \"返回值\";\n                    }\n                }\n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e2\n            \u003cpre\u003e\n                import com.opensymphony.xwork2.Action;\n                public class 名称 implements Action {  \n                    @Override\n                    public String execute() throws Exception {\n                        // TODO Auto-generated method stub\n                        return null;\n                    }\n                }\n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e3√\n            \u003cpre\u003e\n                import com.opensymphony.xwork2.ActionSupport;\n                public class 名称 extends ActionSupport {  \n                    @Override\n                    public String execute() throws Exception {\n                        // TODO Auto-generated method stub\n                        return \"\";\n                    }\n                }  \n                \u003c/pre\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n    \u003ch4\u003e方法访问:\u003c/h4\u003e\n    \u003cpre\u003e\n                \u0026lt;package name=\"名称\" extends=\"struts-default\" namespace=\"/\"\u0026gt;\n                     \u0026lt;action name=\"index_*\" class=\"全路径\" method=\"{1}\"\u0026gt;\n                             \u0026lt;result name=\"返回值\"\u0026gt;/网页\u0026lt;/result\u0026gt;\n                     \u0026lt;/action\u0026gt;\n                 \u0026lt;/package\u0026gt;\n                \u003c/pre\u003e\n    \u003ch4\u003e全局结果页面配置:\u003c/h4\u003e \n    \u003cpre\u003e\n                \u0026lt;package\u0026gt;\n                \u0026lt;global-results\u0026gt;\u0026lt;result name=\"....\"\u0026gt;/....\u0026lt;/result\u0026gt;\u0026lt;/global-results\u0026gt;\n                \u003c/pre\u003e\n    \u003ch4\u003e获取表单:\u003c/h4\u003e  \n    \u003cpre\u003e\n                //耦合低\n                ActionContext context = ActionContext.getContext();  \n                Map\u0026lt;String,Object\u0026gt; map = context.getParameters();  \n                Set\u0026lt;String\u0026gt; keys = map.keySet();\n                for(String key:keys)\n                {\n                    Object[] obj = (Object[])map.get(key);\n                    ...\n                }  \n                \u003c/pre\u003e\n    或 \n    \u003cpre\u003e\n                //常用\n                HttpServletRequest request = ServletActionContext.getRequest();  \n                String xxx = request.getParameter(\"xxx\");  \n                \u003c/pre\u003e\n    或 \n    \u003cpre\u003e\n                implements ServletRequestAware\n                private HttpServletRequest request;\n                public void setServletRequest(HttpServletRequest request) {\n                    this.request = request;\n                }\n                \u003c/pre\u003e\n    \u003ch4\u003e操作域对象:\u003c/h4\u003e  \n    \u003cpre\u003e\n                HttpServletRequest request = ServletActionContext.getRequest();\n                request.setAttribute(\"名\",\"值\");\n                HttpSession session = request.getSession();\n                session.setAttribute(\"名\",\"值\");\n                ServletContext context = ServletActionContext.getServletContext();\n                context.setAttribute(\"名\",\"值\");\n                \u003c/pre\u003e\n    \u003ch4\u003e封装到实体类:\u003c/h4\u003e  \n    \u003cpre\u003e\n                public class index_action extends ActionSupport {  \n                    定义变量;\n                    get()....set()....;\n                    @Override  \n                    public String execute() throws Exception {\n                        // TODO Auto-generated method stub\n                        return \"\";\n                    }\n                }  \n                \u003c/pre\u003e\n    或  √\n    \u003cpre\u003e\n                public class index_action extends ActionSupport implements ModelDriven\u0026lt;Entity\u0026gt; {  \n                    private Entity Entity_name = new Entity();\n                    public Entity getModel(){\n                        return Entity;\n                    }\n                    @Override  \n                    public String execute() throws Exception {\n                        // TODO Auto-generated method stub\n                        return \"\";\n                    }\n                }  \n                \u003c/pre\u003e\n    或 \n    \u003cpre\u003e\n                \u0026lt;input name=\"Entity_name.name\"\u0026gt;\n                private Entity Entity_name;\n                get()...set()...\n                \u003c/pre\u003e\n    \u003ch4\u003e值栈:\u003c/h4\u003e\n    \u003cul\u003e\n        \u003cli\u003eognl:\n            \u003cpre\u003e\n                \u0026lt;% taglib uri=\"/struts-tags\" prefix=\"s\"%\u0026gt;  \n                \u0026lt;s:property value=\"OGNL\"\u0026gt;  \n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e获取值栈对象\n            \u003cpre\u003e\n                ActionContext context = ActionContext.getContext();\n                ValueStack stack = context.getValueStack();  \n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e值栈内放数据\n            \u003cpre\u003e\n                //stack.set(\"key\",\"value\");  \n                或 \n                //stack.push(\"value\");  取 \u0026lt;s:property value=\"[...].top\"\u0026gt;\n                或 \n                private String name;\n                get()....;\n                name=\"value\";  \n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e值栈放对象:\n            \u003cpre\u003e\n                private Entity Entity_name = new Entity();\n                public Entity getEntity(){\n                    return Entity_name;\n                    }\n                Entity_name.set().....;  \n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e值栈放List:\n            \u003cpre\u003e\n                private List\u0026lt;Entity\u0026gt; list = new ArrayList\u0026lt;Entity\u0026gt;();\n                public List\u0026lt;Entity\u0026gt; getList(){\n                    return list;\n                }  \n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e值栈取数据:\n            \u003cpre\u003e\n                \u0026lt;s:property value=\"key\"/\u0026gt;  \n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e值栈取对象:\n            \u003cpre\u003e\n                \u0026lt;s:property value=\"对象.属性\"/\u0026gt;  \n                \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e值栈取List:\n            \u003cpre\u003e\n                \u0026lt;s:property value=\"List[...].属性\"/\u0026gt; 或 \u0026lt;s:iterator value=\"list\"\u0026gt;\u0026lt;s:property value=\"属性\"/\u0026gt;\u0026lt;/s:iterator\u0026gt;  \n                或 \u0026lt;s:iterator value=\"list\" var=\"name\"\u0026gt;\u0026lt;s:property value=\"#name.属性\"/\u0026gt;\u0026lt;s:iterator\u0026gt;\n                \u003c/pre\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n    \u003ch4\u003e拦截器:\u003c/h4\u003e  \n    \u003cpre\u003e\n                extends AbstractInterceptor\n                //implements Interceptor\n                void init()\n                void destory()\n                String intercept(ActionInvocation invocation)  \n                或 \n                extends MethodFilterInterceptor  \n                重写doIntercept(ActionInvocation invocation)方法  \n                配置拦截器:\n                \u0026lt;package内\u0026gt;\n                \u0026lt;interceptors\u0026gt;\u0026lt;interceptor name=\"名称\" class=\"全路径\"\u0026gt;\u0026lt;/interceptor\u0026gt;\u0026lt;/interceptors\u0026gt;  \n                \u0026lt;action内\u0026gt;\n                \u0026lt;interceptor-ref name=\"名称\"\u0026gt;\u0026lt;param name=\"excludeMethods\"\u0026gt;方法名\u0026lt;/param\u0026gt;\u0026lt;/interceptor-ref\u0026gt;  \n                \u0026lt;interceptor-ref name=\"defaultStack\"\u0026gt;\u0026lt;/interceptor-ref\u0026gt;\n                登录拦截器:  \n                public class 名称 extends MethodFilterInterceptor{\n                    @Override\n                    protected String doIntercept(ActionInvocation arg0) throws Exception {\n                        // TODO Auto-generated method stub\n                        HttpServletRequest request = ServletActionContext.getRequest();\n                        Object obj = request.getSession().getAttribute(\"session名称\");  \n                        if(obj != null){\n                            return arg0.invoke();\n                        }else{\n                            return \"登录页面标签\";\n                        }\n                    }\n                }\n                \u003c/pre\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\u003cdiv\u003e\n    \u003ch2 id=\"ELJSTL\"\u003eEL\u003c/h2\u003e\n    \u003cpre\u003e\n                    ${ Expression }\n                    ${ 变量1 运算符 变量2}\n                    pageScope requestScope sessionScope applicationScope\n                    ${ bean.property }\n                    ${ collection[elementName] }\n                    pageContext param paramValues cookie initParam\n                                                \u003c/pre\u003e\n    \u003ch2\u003e JSTL\u003c/h2\u003e\n    \u003cpre\u003e\n                    \u0026lt;c:out value=\"变量名\"\u0026gt;\u0026lt;/c:out\u0026gt;\n                    \u0026lt;c:set value=\"值\" scope=\"容器\" var=\"元素名\"\u0026gt;\u0026lt;/c:set\u0026gt;\n                    \u0026lt;c:remove var=\"元素名\" scope=\"容器\"\u0026gt;\u0026lt;/c:remove\u0026gt;\n                    \u0026lt;c:if test=\"${ 判断条件 }\"\u0026gt; ... \u0026lt;/c:if\u0026gt;\n                    \u0026lt;c:choose\u0026gt;\n                    \u0026lt;c:when test=\"${ 条件1 }\"\u0026gt;...\u0026lt;/c:when\u0026gt;\n                    \u0026lt;c:when test=\"${ 条件2 }\"\u0026gt;...\u0026lt;/c:when\u0026gt;\n                    \u0026lt;c:otherwise\u0026gt;...\u0026lt;/c:otherwise\u0026gt;\n                    \u0026lt;/c:choose\u0026gt;\n                    \u0026lt;c:forEach var=\"元素名\"\u0026gt; items=\"集合名\" begin=\"起始\" end=\"结束\" step=\"步长\"\u0026gt;....\u0026lt;/c:forEach\u0026gt;\n                    \u0026lt;c:forTokens items=\"字符串\" delims=\"分隔符\" var=\"子串名\" begin=\"起始\" end=\"结束\" step=\"步长\"\u0026gt;...\u0026lt;/c:forTokens\u0026gt;  \n                    ${ fn:length(String或集合) }\n                    ${ fn:contains(\"源字符串\",\"子字符串\")\n                    ${ fn:startsWith(\"源字符串\",\"指定字符串\") }  \n                    ${ fn:endsWith(\"源字符串\",\"指定字符串\") }  \n                    ${ fn:escapeXML(特殊字符) }\n                    ${ fn:indexOf(\"源字符串\",\"指定字符串\") }\n                    ${ fn:join(数组,\"分隔符\") }\n                    ${ fn:replace(\"源字符串\",\"被替换字符\",\"替换字符\") }\n                    ${ fn:split(\"源字符串\",\"分隔符\") }\n                    ${ fn:substring(\"源字符串\",起始位置,结束位置) }\n                    ${ fn:substringAfter(\"源字符串\",\"子字符串\") }\n                    ${ fn:substringBefore(\"源字符串\",\"子字符串\") }\n                    ${ fn:toLowerCase(\"源字符串\") }\n                    ${ fn:toUpperCase(\"源字符串\") }\n                    ${ fn:trim(\"源字符串\") }\n                                            \u003c/pre\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\u003cdiv\u003e\n    \u003ch2 id=\"AJAX\"\u003eAXAJ与Struts2\u003c/h2\u003e\n    \u003cul\u003e\n        \u003cli\u003eJquery\n            \u003cpre\u003e\n                        $(function() {\n                            $(\"#按钮id\").click(function() {\n                            //提交的参数，name是struts action中对应的接收变量\n                                var params = {\n                                   name : $(\"#表单名称\").val()\n                                };\n                                $.ajax({\n                                    type: \"POST\",\n                                    url: \"Action名称\",\n                                    data: params,\n                                    dataType:\"text\",\n                                    //ajax返回值设置为text（json格式也可用它返回，可打印出结果，也可设置成json）\n                                    success: function(json){\n                                        var obj = $.parseJSON(json);\n                                        var state_value = obj.result;\n                                        //result是和action中定义的result变量的get方法对应的\n                                        方法......\n                                        ....\n                                    },\n                                    error: function(json){\n                                        方法...\n                                        ...\n                                        return false;\n                                    }\n                                });\n                            });\n                        });\n                        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003estruts.xml\n            \u003cpre\u003e\n                         \u0026lt;package name=\"\" extends=\"json-default\"\u0026gt;\n                            \u0026lt;action name=\"\" class=\"\" method=\"\"\u0026gt;\n                                \u0026lt;result name=\"success\" type=\"json\"\u0026gt;\u0026lt;/result\u0026gt;\n                            \u0026lt;/action\u0026gt;\n                        \u0026lt;/package\u0026gt;\n                        \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003eAction\n            \u003cpre\u003e\n                        package action;\n                        import com.opensymphony.xwork2.ActionSupport;\n                        public class AjaxAction extends ActionSupport{\n                            private static final long serialVersionUID = 1L;\n                            private String name;\n                            public String getName() {\n                                return name;\n                            }\n                            public void setName(String name) {\n                                this.name = name;\n                            }\n                            private String result;\n                            public String getResult() {\n                                return result;\n                            }\n                            public void setResult(String result) {\n                                this.result = result;\n                            }\n                            public String addType() {\n                                result = f(typename);\n                                ....\n                                return SUCCESS;\n                            }\n                        }\n                        \u003c/pre\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\u003cdiv\u003e\n    \u003ch2 id=\"BootStrap\"\u003e栅格与响应式\u003c/h2\u003e\n    \u003cul\u003e\n        \u003cli\u003e栅格\n            \u003cpre\u003e\n                            超小屏幕 手机 (\u0026lt;768px) .col-xs-\n                            小屏幕 平板 (≥768px) .col-sm-\n                            中等屏幕 桌面显示器 (≥992px) .col-md-\n                            大屏幕 大桌面显示器 (≥1200px) .col-lg-\n                            \u0026lt;div class=\"row\"\u0026gt;\n                              \u0026lt;div class=\"col-xx-n\"\u0026gt;12栅格\u0026lt;/div\u0026gt;\n                            \u0026lt;/div\u0026gt;\n                            \u003c/pre\u003e\n        \u003c/li\u003e\n        \u003cli\u003e响应式\n            \u003cpre\u003e\n                            hidden-xs 超小屏幕不可见\n                            visible-xs-block 在超小屏幕上可见\n                            hidden-sm 小屏幕不可见\n                            visible-sm-block 在小屏幕上可见不可见\n                            hidden-md 中等屏幕不可见\n                            visible-md-block 在中等屏幕上可见\n                            hidden-lg 大屏幕不可见\n                            visible-lg-block 在大屏幕上可见\n                            hidden-xs hidden-sm 超小屏幕和小屏幕不可见\n                            visible-xs-block visible-sm-block 在超小屏幕和小屏幕上可见\n                            hidden-md hidden-lg 中等屏幕和大屏幕不可见\n                            visible-md-block visible-lg-block 在中等屏幕和大屏幕上可见\n                            hidden-xs hidden-md 超小屏幕和中等屏幕不可见\n                            visible-xs-block visible-md-block 在超小屏幕和中等屏幕上可见\n                            hidden-sm hidden-lg 小屏幕和大屏幕不可见\n                            visible-sm-block visible-lg-block 在小屏幕和大屏幕上可见\n                            hidden-xs hidden-lg 超小屏幕和大屏幕不可见\n                            visible-xs-block visible-lg-block 在超小屏幕和大屏幕上可见\n                            hidden-sm hidden-md 小屏幕和中等屏幕不可见\n                            visible-sm-block visible-md-block 在小屏幕和中等屏幕上可见\n                            \u003c/pre\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/div\u003e\n\u003cdiv\u003e\u003cdiv\u003e\n    \u003ch2 id=\"websocket\"\u003ewebsocket与netty框架\u003c/h2\u003e\n    \u003cul\u003e\n        \u003cli\u003ewebsocket\n            \u003cul\u003e\n                \u003cli\u003e前端页面\n                    \u003cpre\u003e\n\t\u0026lt;%@ page language=\"java\" pageEncoding=\"UTF-8\" %\u0026gt;\n\t\u0026lt;!DOCTYPE html\u0026gt;\n\t\u0026lt;html\u0026gt;\n\t\u0026lt;head\u0026gt;\n\t    \u0026lt;title\u0026gt;WebSocket\u0026lt;/title\u0026gt;\n\t\u0026lt;/head\u0026gt;\n\t\u0026lt;body\u0026gt;\n\t    \u0026lt;button onclick=\"send()\"\u0026gt;发送消息\u0026lt;/button\u0026gt;\n\t    \u0026lt;button onclick=\"closeWebSocket()\"\u0026gt;关闭WebSocket连接\u0026lt;/button\u0026gt;\n\t\u0026lt;/body\u0026gt;\n\n\t\u0026lt;script type=\"text/javascript\"\u0026gt;\n\t    var websocket = null;\n\t    //判断当前浏览器是否支持WebSocket\n\t    if ('WebSocket' in window) {\n\t       websocket = new WebSocket(\"ws://112.74.97.185/websocket\"); // 此处为服务器地址!!!不能是localhost!!!\n\t    }\n\t    else {\n\t        alert('当前浏览器不支持websocket')\n\t    }\n\t    //连接发生错误的回调方法\n\t    websocket.onerror = function () {\n\t        setMessageInnerHTML(\"WebSocket连接发生错误\");\n\t    };\n\t    //连接成功建立的回调方法\n\t    websocket.onopen = function () {\n\t        //..\n\t    }\n\n\t    //接收到消息的回调方法\n\t    websocket.onmessage = function (event) {\n\t        //..\n\t    }\n\t    //连接关闭的回调方法\n\t    websocket.onclose = function () {\n\t        //..\n\t    }\n\t    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\n\t    window.onbeforeunload = function () {\n\t        closeWebSocket();\n\t    }\n\t    //关闭WebSocket连接\n\t    function closeWebSocket() {\n\t        websocket.close();\n\t    }\n\t    //发送消息\n\t    function send() {\n\t        var message = //..\n\t        websocket.send(message);\n\t    }\n\t\u0026lt;/script\u0026gt;\n\t\u0026lt;/html\u0026gt;\n\t\t\t\t\t\t\t\t  \u003c/pre\u003e\n                \u003c/li\u003e\n                \u003cli\u003eJAVA类\n                    \u003cpre\u003e\n\tpackage websocket;\n\timport java.io.IOException;\n\timport java.util.concurrent.CopyOnWriteArraySet;\n\timport javax.websocket.*;\n\timport javax.websocket.server.ServerEndpoint;\n\t// @ServerEndpoint 注解是一个类层次的注解\n\t@ServerEndpoint(\"/websocket\")\n\tpublic class Websocket {\n\t  //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。\n\t  private static int onlineCount = 0;\n\t  //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识\n\t  private static CopyOnWriteArraySet\u0026lt;Websocket\u0026gt; webSocketSet = new CopyOnWriteArraySet\u0026lt;Websocket\u0026gt;();\n\t  //与某个客户端的连接会话，需要通过它来给客户端发送数据\n\t  private Session session;\n\t  /**\n\t   * 连接建立成功调用的方法\n\t   * @param session  可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据\n\t   */\n\t  @OnOpen\n\t  public void onOpen(Session session){\n\t      this.session = session;\n\t      webSocketSet.add(this);     //加入set中\n\t  }\n\t  //连接关闭调用的方法\n\t  @OnClose\n\t  public void onClose(){\n\t      webSocketSet.remove(this);  //从set中删除\n\t  }\n\t  /**\n\t   * 收到客户端消息后调用的方法\n\t   * @param message 客户端发送过来的消息\n\t   * @param session 可选的参数\n\t   */\n\t  @OnMessage\n\t  public void onMessage(String message, Session session) {\n\t      //群发消息\n\t      for(Websocket item: webSocketSet){\n\t          try {\n\t              item.sendMessage(message);\n\t          } catch (IOException e) {\n\t              e.printStackTrace();\n\t              continue;\n\t          }\n\t      }\n\t  }\n\t  //发生错误时调用\n\t  @OnError\n\t  public void onError(Session session, Throwable error){\n\t      System.out.println(\"发生错误\");\n\t      error.printStackTrace();\n\t  }\n\t  public void sendMessage(String message) throws IOException{\n\t      this.session.getBasicRemote().sendText(message);\n\t  }\n\t\t\t\t\t\t\t\t    \u003c/pre\u003e\u003c/li\u003e\n                \u003c/li\u003e\n            \u003c/ul\u003e\n        \u003cli\u003ewebsocket使用http域对象\n            \u003cul\u003e\n                \u003cli\u003eConfigurator类中\n                    \u003cpre\u003e\n\tpublic class GetHttpSessionConfigurator extends Configurator {\n\t    @Override\n\t    public void modifyHandshake(ServerEndpointConfig sec,\n\t            HandshakeRequest request, HandshakeResponse response) {\n\t        // TODO Auto-generated method stub\n\t        HttpSession httpSession=(HttpSession) request.getHttpSession();\n\t        sec.getUserProperties().put(HttpSession.class.getName(),httpSession);\n\t    }\n\t}\n\t\t\t\t\t\t\t\t  \u003c/pre\u003e\u003c/li\u003e\n                \u003cli\u003ewebsocket类中\n                    \u003cpre\u003e\n\t@ServerEndpoint(value=\"/...\",configurator=GetHttpSessionConfigurator.class)\n\tpublic void ...(...,EndpointConfig config)\n\tHttpSession httpSession= (HttpSession)config.getUserProperties().get(HttpSession.class.getName());\n\t\t\t\t\t\t\t\t  \u003c/pre\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/li\u003e\n    \u003c/ul\u003e\n\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\t\u003c/body\u003e\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/register","Calls":[{"Id":1,"CurrentPath":"/register","MethodType":"GET","PostForm":null,"RequestHeader":{"Referer":" http","Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{"Content-Type":"text/html; charset=UTF-8"},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\u003e\n\u003chtml\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \u003ctitle\u003eindex\u003c/title\u003e\n    \n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n    \n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n    \n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cstyle type=\"text/css\"\u003e\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\n    \u003c/style\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\n\u003cbody\u003e\n\u003cdiv style=\"margin-top:15%;margin-left:20%;margin-right:20%\"\u003e\n    \u003ch2 class=\"text-center\"\u003e注册\u003c/h2\u003e\n    \u003cform method=\"post\" name=\"form\" id=\"form\"\u003e\n        \u003cdiv class=\"form-group\"\u003e\n            \u003clabel for=\"Username\"\u003e用户名\u003c/label\u003e\n            \u003cinput type=\"text\" class=\"form-control\" id=\"Username\" name=\"Username\"\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"form-group\"\u003e\n            \u003clabel for=\"Password\"\u003e密码\u003c/label\u003e\n            \u003cinput type=\"password\" class=\"form-control\" id=\"Password\" name=\"Password\"\u003e\n        \u003c/div\u003e\n    \u003c/form\u003e\n    \u003cbutton class=\"btn btn-default\" name=\"btn\" id=\"btn\" onclick=\"return validate()\"\u003e确认\u003c/button\u003e\n    \u003cbutton type=\"reset\" class=\"btn btn-default\" onclick=\"rs()\"\u003e重置\u003c/button\u003e\n    \u003cp id=\"text\" name=\"text\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\u003cscript type=\"text/javascript\" src=\"../js/Register.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/Register.js","Calls":[{"Id":2,"CurrentPath":"/Register.js","MethodType":"GET","PostForm":null,"RequestHeader":{"Referer":" http"},"CommonRequestHeaders":null,"ResponseHeader":{"Accept-Ranges":"bytes","Content-Length":"967","Content-Type":"application/javascript; charset=UTF-8","Last-Modified":"Tue, Mar 13 2018 13:44:45 GMT"},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"function validate(){\r\n    var a = document.getElementById(\"Username\").value;\r\n    var b = document.getElementById(\"Password\").value;\r\n    if(a == \"\"){\r\n        alert(\"用户名不能为空\");\r\n        return false;\r\n    }\r\n    if(b == \"\"){\r\n        alert(\"用户名不能为空\");\r\n        return false;\r\n    }\r\n    if (confirm(\"提交?\")){\r\n        return true;\r\n    }else{\r\n        return false;\r\n    }\r\n}\r\n$(function() {\r\n    $(\"#btn\").click(function() {\r\n        //提交的参数，name是struts action中对应的接收变量\r\n        var params = {\r\n            Username : $(\"#Username\").val(),\r\n            Password : $(\"#Password\").val()\r\n        };\r\n        $.post(\"/Register\",params,function (data) {\r\n            if (data == \" \") {\r\n                $(location).attr('href', '/backend');\r\n            } else {\r\n                $(\"#text\").html(data)\r\n            }\r\n        });\r\n    });\r\n});\r\nfunction rs() {\r\n    document.getElementById(\"form\").reset();\r\n}","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/login","Calls":[{"Id":4,"CurrentPath":"/login","MethodType":"GET","PostForm":null,"RequestHeader":{"Referer":" http","Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{"Content-Type":"text/html; charset=UTF-8"},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"utf-8\"\u003e\r\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\r\n    \u003ctitle\u003eindex\u003c/title\u003e\r\n    \r\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\r\n    \r\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\r\n    \r\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\r\n    \r\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\r\n    \u003cstyle type=\"text/css\"\u003e\r\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\r\n    \u003c/style\u003e\r\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n\u003cdiv style=\"margin-top:15%;margin-left:20%;margin-right:20%\"\u003e\r\n    \u003cform name=\"form1\" method=\"post\"\u003e\r\n        \u003cdiv class=\"form-group\"\u003e\r\n            \u003clabel for=\"Username\"\u003e账号\u003c/label\u003e\r\n            \u003cinput type=\"text\" class=\"form-control\" id=\"Username\" name=\"Username\"\u003e\r\n        \u003c/div\u003e\r\n        \u003cdiv class=\"form-group\"\u003e\r\n            \u003clabel for=\"Password\"\u003e密码\u003c/label\u003e\r\n            \u003cinput type=\"password\" class=\"form-control\" id=\"Password\" name=\"Password\"\u003e\r\n        \u003c/div\u003e\r\n    \u003c/form\u003e\r\n    \u003cbutton type=\"submit\" class=\"btn btn-default\" id=\"btn\" name=\"btn\"\u003e确认\u003c/button\u003e\r\n    \u003cspan id=\"helpBlock\" class=\"help-block\"\u003e账号:username 密码:password 账号:username2 密码:password2\u003c/span\u003e\r\n    \u003cp id=\"text\" name=\"text\"\u003e\u003c/p\u003e\r\n\u003c/div\u003e\r\n\u003cscript src=\"https://code.jquery.com/jquery-3.1.1.min.js\"\u003e\u003c/script\u003e\r\n\u003cscript type=\"text/javascript\" src=\"../js/UserLoginAjax.js\"\u003e\u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/UserLoginAjax.js","Calls":[{"Id":5,"CurrentPath":"/UserLoginAjax.js","MethodType":"GET","PostForm":null,"RequestHeader":{"Referer":" http"},"CommonRequestHeaders":null,"ResponseHeader":{"Accept-Ranges":"bytes","Content-Length":"354","Content-Type":"application/javascript; charset=UTF-8","Last-Modified":"Sun, Mar 11 2018 07:25:49 GMT"},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"$(function() {\r\n    $(\"#btn\").click(function() {\r\n        var params = {\r\n            Username : $(\"#Username\").val(),\r\n            Password : $(\"#Password\").val()\r\n        };\r\n        $.post(\"/UserLoginAjax\",params,function (data) {\r\n            if (data == \" \") $(location).attr('href', '/chatform');\r\n            $(\"#text\").html(data)});\r\n    });\r\n});","ResponseCode":200}]},{"HttpVerb":"POST","Path":"/UserLoginAjax","Calls":[{"Id":6,"CurrentPath":"/UserLoginAjax","MethodType":"POST","PostForm":null,"RequestHeader":{"Content-Type":" application/x-www-form-urlencoded; charset=UTF-8\r","Referer":" http","X-Requested-With":" XMLHttpRequest\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"Username=a\u0026Password=a","ResponseBody":" ","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/chatform","Calls":[{"Id":7,"CurrentPath":"/chatform","MethodType":"GET","PostForm":null,"RequestHeader":{"Referer":" http","Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{"Content-Type":"text/html; charset=UTF-8"},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE html\u003e\r\n\u003chtml lang=\"en\"\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"utf-8\"\u003e\r\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\r\n    \u003ctitle\u003eindex\u003c/title\u003e\r\n    \r\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\r\n    \r\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\r\n    \r\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\r\n    \r\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\r\n    \u003cstyle type=\"text/css\"\u003e\r\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\r\n    \u003c/style\u003e\r\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n\u003cdiv style=\"margin-top:5%;margin-left:10%;margin-right:10%\"\u003e\r\n    \u003ch4 class=\"text-center\"\u003e当前用户: a\u003c/h4\u003e\u003cbr\u003e\r\n    \u003cform name = \"form1\" method=\"post\"\u003e\r\n        输入聊天信息:\u003cinput id=\"msg\" name=\"msg\" type=\"text\" size=\"40\" class=\"form-control\"\u003e\r\n    \u003c/form\u003e\r\n    \u003cbutton name=\"websocket\" id=\"websocket\" class=\"btn btn-default\" onclick=\"send()\"\u003e发送\u003c/button\u003e\r\n    \u003cbutton class=\"btn btn-default\" onclick=\"javascript:window.location.href='logout'\"\u003e退出登录\u003c/button\u003e\r\n    \u003cdiv class=\"hidden-lg hidden-md\"\u003e\u003cbutton name=\"s\" id=\"s\" class=\"btn btn-default\" class=\"hidden-lg hidden-md\"\u003e隐藏在线用户\u003c/button\u003e\u003c/div\u003e\r\n    \u003chr\u003e\r\n    \u003cdiv class=\"row\"\u003e\r\n        \u003cdiv class=\"col-xs-12 col-sm-12 col-md-9 col-lg-9\" id=\"message\"\u003e\u003ch4\u003e聊天信息\u003c/h4\u003e\u003c/div\u003e\r\n        \u003cdiv class=\"hidden-xs hidden-sm col-md-3 col-lg-3\" id=\"login\"\u003e\u003ch4\u003e在线用户\u003c/h4\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n    \u003cdiv class=\"row\"\u003e\r\n        \u003cbr\u003e\u003cbr\u003e\r\n        \u003cdiv class=\"col-xs-12 col-sm-12 hidden-md hidden-lg\" id=\"p\"\u003e\u003ch4\u003e在线用户\u003c/h4\u003e\u003c/div\u003e\r\n    \u003c/div\u003e\r\n\u003c/div\u003e\r\n\r\n\u003cscript src=\"/echo/iris-ws\"\u003e\u003c/script\u003e\r\n\u003cscript src=\"https://code.jquery.com/jquery-3.1.1.min.js\"\u003e\u003c/script\u003e\r\n\u003cscript type=\"text/javascript\"\u003e\r\n        var input = document.getElementById(\"msg\");\r\n        var output = document.getElementById(\"message\");\r\n        var useroutput = document.getElementById(\"login\")\r\n        var socket = new Ws(\"ws://localhost:80/echo\");\r\n        socket.OnConnect(function () {\r\n            output.innerHTML += \"已连接服务器\u003cbr\u003e\";\r\n            socket.Emit(\"chat\",\"a\"+\"连接服务器\")\r\n            socket.Emit(\"login\",\"OnConnect\")\r\n        });\r\n        socket.OnDisconnect(function () {\r\n            output.innerHTML += \"无法连接服务器\\n\";\r\n        });\r\n        socket.On(\"chat\", function (msg) {\r\n            output.innerHTML = output.innerHTML+ msg + \"\u003cbr\u003e\";\r\n        });\r\n        socket.On(\"login\",function (msg) {\r\n            useroutput.innerHTML = msg\r\n        });\r\n        socket.onclose(function () {\r\n            socket.Emit(\"login\",\"onclose\")\r\n        });\r\n        function send() {\r\n            if(input.value != \"\") {\r\n                socket.Emit(\"chat\", \"a\"+\" : \" + input.value);\r\n                input.value = \"\"; \r\n            }\r\n        };\r\n\u003c/script\u003e\r\n\u003cscript type=\"text/javascript\" src=\"../js/slideToggle.js\"\u003e\u003c/script\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/echo/iris-ws","Calls":[{"Id":8,"CurrentPath":"/echo/iris-ws","MethodType":"GET","PostForm":null,"RequestHeader":{"Referer":" http"},"CommonRequestHeaders":null,"ResponseHeader":{"Content-Type":"application/javascript; charset=UTF-8","Last-Modified":"Wed, Mar 14 2018 04:38:06 GMT"},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"var websocketStringMessageType = 0;\nvar websocketIntMessageType = 1;\nvar websocketBoolMessageType = 2;\nvar websocketJSONMessageType = 4;\nvar websocketMessagePrefix = \"iris-websocket-message:\";\nvar websocketMessageSeparator = \";\";\nvar websocketMessagePrefixLen = websocketMessagePrefix.length;\nvar websocketMessageSeparatorLen = websocketMessageSeparator.length;\nvar websocketMessagePrefixAndSepIdx = websocketMessagePrefixLen + websocketMessageSeparatorLen - 1;\nvar websocketMessagePrefixIdx = websocketMessagePrefixLen - 1;\nvar websocketMessageSeparatorIdx = websocketMessageSeparatorLen - 1;\nvar Ws = (function () {\n    //\n    function Ws(endpoint, protocols) {\n        var _this = this;\n        // events listeners\n        this.connectListeners = [];\n        this.disconnectListeners = [];\n        this.nativeMessageListeners = [];\n        this.messageListeners = {};\n        if (!window[\"WebSocket\"]) {\n            return;\n        }\n        if (endpoint.indexOf(\"ws\") == -1) {\n            endpoint = \"ws://\" + endpoint;\n        }\n        if (protocols != null \u0026\u0026 protocols.length \u003e 0) {\n            this.conn = new WebSocket(endpoint, protocols);\n        }\n        else {\n            this.conn = new WebSocket(endpoint);\n        }\n        this.conn.onopen = (function (evt) {\n            _this.fireConnect();\n            _this.isReady = true;\n            return null;\n        });\n        this.conn.onclose = (function (evt) {\n            _this.fireDisconnect();\n            return null;\n        });\n        this.conn.onmessage = (function (evt) {\n            _this.messageReceivedFromConn(evt);\n        });\n    }\n    //utils\n    Ws.prototype.isNumber = function (obj) {\n        return !isNaN(obj - 0) \u0026\u0026 obj !== null \u0026\u0026 obj !== \"\" \u0026\u0026 obj !== false;\n    };\n    Ws.prototype.isString = function (obj) {\n        return Object.prototype.toString.call(obj) == \"[object String]\";\n    };\n    Ws.prototype.isBoolean = function (obj) {\n        return typeof obj === 'boolean' ||\n            (typeof obj === 'object' \u0026\u0026 typeof obj.valueOf() === 'boolean');\n    };\n    Ws.prototype.isJSON = function (obj) {\n        return typeof obj === 'object';\n    };\n    //\n    // messages\n    Ws.prototype._msg = function (event, websocketMessageType, dataMessage) {\n        return websocketMessagePrefix + event + websocketMessageSeparator + String(websocketMessageType) + websocketMessageSeparator + dataMessage;\n    };\n    Ws.prototype.encodeMessage = function (event, data) {\n        var m = \"\";\n        var t = 0;\n        if (this.isNumber(data)) {\n            t = websocketIntMessageType;\n            m = data.toString();\n        }\n        else if (this.isBoolean(data)) {\n            t = websocketBoolMessageType;\n            m = data.toString();\n        }\n        else if (this.isString(data)) {\n            t = websocketStringMessageType;\n            m = data.toString();\n        }\n        else if (this.isJSON(data)) {\n            //propably json-object\n            t = websocketJSONMessageType;\n            m = JSON.stringify(data);\n        }\n        else if (data !== null \u0026\u0026 typeof(data) !== \"undefined\" ) {\n            // if it has a second parameter but it's not a type we know, then fire this:\n            console.log(\"unsupported type of input argument passed, try to not include this argument to the 'Emit'\");\n        }\n        return this._msg(event, t, m);\n    };\n    Ws.prototype.decodeMessage = function (event, websocketMessage) {\n        //iris-websocket-message;user;4;themarshaledstringfromajsonstruct\n        var skipLen = websocketMessagePrefixLen + websocketMessageSeparatorLen + event.length + 2;\n        if (websocketMessage.length \u003c skipLen + 1) {\n            return null;\n        }\n        var websocketMessageType = parseInt(websocketMessage.charAt(skipLen - 2));\n        var theMessage = websocketMessage.substring(skipLen, websocketMessage.length);\n        if (websocketMessageType == websocketIntMessageType) {\n            return parseInt(theMessage);\n        }\n        else if (websocketMessageType == websocketBoolMessageType) {\n            return Boolean(theMessage);\n        }\n        else if (websocketMessageType == websocketStringMessageType) {\n            return theMessage;\n        }\n        else if (websocketMessageType == websocketJSONMessageType) {\n            return JSON.parse(theMessage);\n        }\n        else {\n            return null; // invalid\n        }\n    };\n    Ws.prototype.getWebsocketCustomEvent = function (websocketMessage) {\n        if (websocketMessage.length \u003c websocketMessagePrefixAndSepIdx) {\n            return \"\";\n        }\n        var s = websocketMessage.substring(websocketMessagePrefixAndSepIdx, websocketMessage.length);\n        var evt = s.substring(0, s.indexOf(websocketMessageSeparator));\n        return evt;\n    };\n    Ws.prototype.getCustomMessage = function (event, websocketMessage) {\n        var eventIdx = websocketMessage.indexOf(event + websocketMessageSeparator);\n        var s = websocketMessage.substring(eventIdx + event.length + websocketMessageSeparator.length + 2, websocketMessage.length);\n        return s;\n    };\n    //\n    // Ws Events\n    // messageReceivedFromConn this is the func which decides\n    // if it's a native websocket message or a custom qws message\n    // if native message then calls the fireNativeMessage\n    // else calls the fireMessage\n    //\n    // remember iris gives you the freedom of native websocket messages if you don't want to use this client side at all.\n    Ws.prototype.messageReceivedFromConn = function (evt) {\n        //check if qws message\n        var message = evt.data;\n        if (message.indexOf(websocketMessagePrefix) != -1) {\n            var event_1 = this.getWebsocketCustomEvent(message);\n            if (event_1 != \"\") {\n                // it's a custom message\n                this.fireMessage(event_1, this.getCustomMessage(event_1, message));\n                return;\n            }\n        }\n        // it's a native websocket message\n        this.fireNativeMessage(message);\n    };\n    Ws.prototype.OnConnect = function (fn) {\n        if (this.isReady) {\n            fn();\n        }\n        this.connectListeners.push(fn);\n    };\n    Ws.prototype.fireConnect = function () {\n        for (var i = 0; i \u003c this.connectListeners.length; i++) {\n            this.connectListeners[i]();\n        }\n    };\n    Ws.prototype.OnDisconnect = function (fn) {\n        this.disconnectListeners.push(fn);\n    };\n    Ws.prototype.fireDisconnect = function () {\n        for (var i = 0; i \u003c this.disconnectListeners.length; i++) {\n            this.disconnectListeners[i]();\n        }\n    };\n    Ws.prototype.OnMessage = function (cb) {\n        this.nativeMessageListeners.push(cb);\n    };\n    Ws.prototype.fireNativeMessage = function (websocketMessage) {\n        for (var i = 0; i \u003c this.nativeMessageListeners.length; i++) {\n            this.nativeMessageListeners[i](websocketMessage);\n        }\n    };\n    Ws.prototype.On = function (event, cb) {\n        if (this.messageListeners[event] == null || this.messageListeners[event] == undefined) {\n            this.messageListeners[event] = [];\n        }\n        this.messageListeners[event].push(cb);\n    };\n    Ws.prototype.fireMessage = function (event, message) {\n        for (var key in this.messageListeners) {\n            if (this.messageListeners.hasOwnProperty(key)) {\n                if (key == event) {\n                    for (var i = 0; i \u003c this.messageListeners[key].length; i++) {\n                        this.messageListeners[key][i](message);\n                    }\n                }\n            }\n        }\n    };\n    //\n    // Ws Actions\n    Ws.prototype.Disconnect = function () {\n        this.conn.close();\n    };\n    // EmitMessage sends a native websocket message\n    Ws.prototype.EmitMessage = function (websocketMessage) {\n        this.conn.send(websocketMessage);\n    };\n    // Emit sends an iris-custom websocket message\n    Ws.prototype.Emit = function (event, data) {\n        var messageStr = this.encodeMessage(event, data);\n        this.EmitMessage(messageStr);\n    };\n    return Ws;\n}());\n","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/slideToggle.js","Calls":[{"Id":9,"CurrentPath":"/slideToggle.js","MethodType":"GET","PostForm":null,"RequestHeader":{"Referer":" http"},"CommonRequestHeaders":null,"ResponseHeader":{"Accept-Ranges":"bytes","Content-Length":"264","Content-Type":"application/javascript; charset=UTF-8","Last-Modified":"Thu, Mar 08 2018 14:06:36 GMT"},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"$(document).ready(function() {\r\n    $(\"#s\").click(function(){\r\n        $(\"#p\").slideToggle(\"slow\");\r\n        if($(\"#s\").text() == \"隐藏在线用户\")\r\n            $(\"#s\").text(\"显示在线用户\");\r\n        else $(\"#s\").text(\"隐藏在线用户\");\r\n    });\r\n});","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/echo","Calls":[{"Id":11,"CurrentPath":"/echo","MethodType":"GET","PostForm":null,"RequestHeader":{"Pragma":" no-cache\r","Sec-Websocket-Extensions":" permessage-deflate; client_max_window_bits\r","Sec-Websocket-Key":" dLrhIJBQMnTAatkyojMTiw==\r","Sec-Websocket-Version":" 13\r","Upgrade":" websocket\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/article/dasf","Calls":[{"Id":1,"CurrentPath":"/article/dasf","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"zh-CN\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \u003ctitle\u003eindex\u003c/title\u003e\n    \u003c!-- Bootstrap --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003c!-- 最新版本的 Bootstrap 核心 CSS 文件 --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 可选的 Bootstrap 主题文件（一般不用引入） --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 最新的 Bootstrap 核心 JavaScript 文件 --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cstyle type=\"text/css\"\u003e\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\n    \u003c/style\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n\u003cnav id=\"navbar-example\" class=\"navbar navbar-default navbar-static\" role=\"navigation\"\u003e\n    \u003cdiv class=\"container-fluid\"\u003e\n        \u003cdiv class=\"navbar-header\"\u003e\n            \u003cbutton class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\"\n                    data-target=\".bs-js-navbar-scrollspy\"\u003e\n                \u003cspan class=\"sr-only\"\u003e切换导航\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eWeb开发学习笔记\u003c/a\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"collapse navbar-collapse bs-js-navbar-scrollspy\"\u003e\n            \u003cul class=\"nav navbar-nav\"\u003e\n                \u003cli\u003e\u003ca href=\"adminlogin\"\u003e后台 \u003c!--\u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e--\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#go\"\u003eGO语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Spring\"\u003ePython语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Hibernate\"\u003eJava学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Struts2\"\u003eJS学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#ELJSTL\"\u003ePHP学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#AJAX\"\u003e日记/感想\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#BootStrap\"\u003e后端知识学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#websocket\"\u003e关于二次元\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n            \u003cform class=\"navbar-form navbar-left\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Search\" value=\"golang是最好的语言\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-default\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"/register\"\u003e注册\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/login\"\u003e登录\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/nav\u003e\n\u003cdiv class=\"cow\"\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n    \u003cdiv data-spy=\"scroll\" data-target=\"#navbar-example\" data-offset=\"0\"\n         style=\"height:800px;overflow:auto; position: relative;\" class=\"col-md-8 col-lg-8 col-sm-10 col-xs-10\"\u003e\n        \u003cdiv\u003e\n            dasf\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/article/dasfasdfasdf","Calls":[{"Id":2,"CurrentPath":"/article/dasfasdfasdf","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"zh-CN\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \u003ctitle\u003eindex\u003c/title\u003e\n    \u003c!-- Bootstrap --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003c!-- 最新版本的 Bootstrap 核心 CSS 文件 --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 可选的 Bootstrap 主题文件（一般不用引入） --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 最新的 Bootstrap 核心 JavaScript 文件 --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cstyle type=\"text/css\"\u003e\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\n    \u003c/style\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n\u003cnav id=\"navbar-example\" class=\"navbar navbar-default navbar-static\" role=\"navigation\"\u003e\n    \u003cdiv class=\"container-fluid\"\u003e\n        \u003cdiv class=\"navbar-header\"\u003e\n            \u003cbutton class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\"\n                    data-target=\".bs-js-navbar-scrollspy\"\u003e\n                \u003cspan class=\"sr-only\"\u003e切换导航\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eWeb开发学习笔记\u003c/a\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"collapse navbar-collapse bs-js-navbar-scrollspy\"\u003e\n            \u003cul class=\"nav navbar-nav\"\u003e\n                \u003cli\u003e\u003ca href=\"adminlogin\"\u003e后台 \u003c!--\u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e--\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#go\"\u003eGO语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Spring\"\u003ePython语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Hibernate\"\u003eJava学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Struts2\"\u003eJS学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#ELJSTL\"\u003ePHP学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#AJAX\"\u003e日记/感想\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#BootStrap\"\u003e后端知识学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#websocket\"\u003e关于二次元\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n            \u003cform class=\"navbar-form navbar-left\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Search\" value=\"golang是最好的语言\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-default\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"/register\"\u003e注册\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/login\"\u003e登录\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/nav\u003e\n\u003cdiv class=\"cow\"\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n    \u003cdiv data-spy=\"scroll\" data-target=\"#navbar-example\" data-offset=\"0\"\n         style=\"height:800px;overflow:auto; position: relative;\" class=\"col-md-8 col-lg-8 col-sm-10 col-xs-10\"\u003e\n        \u003cdiv\u003e\n            dasfasdfasdf\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/article/adf","Calls":[{"Id":1,"CurrentPath":"/article/adf","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"zh-CN\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \u003ctitle\u003eindex\u003c/title\u003e\n    \u003c!-- Bootstrap --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003c!-- 最新版本的 Bootstrap 核心 CSS 文件 --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 可选的 Bootstrap 主题文件（一般不用引入） --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 最新的 Bootstrap 核心 JavaScript 文件 --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cstyle type=\"text/css\"\u003e\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\n    \u003c/style\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n\u003cnav id=\"navbar-example\" class=\"navbar navbar-default navbar-static\" role=\"navigation\"\u003e\n    \u003cdiv class=\"container-fluid\"\u003e\n        \u003cdiv class=\"navbar-header\"\u003e\n            \u003cbutton class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\"\n                    data-target=\".bs-js-navbar-scrollspy\"\u003e\n                \u003cspan class=\"sr-only\"\u003e切换导航\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eWeb开发学习笔记\u003c/a\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"collapse navbar-collapse bs-js-navbar-scrollspy\"\u003e\n            \u003cul class=\"nav navbar-nav\"\u003e\n                \u003cli\u003e\u003ca href=\"adminlogin\"\u003e后台 \u003c!--\u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e--\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#go\"\u003eGO语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Spring\"\u003ePython语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Hibernate\"\u003eJava学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Struts2\"\u003eJS学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#ELJSTL\"\u003ePHP学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#AJAX\"\u003e日记/感想\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#BootStrap\"\u003e后端知识学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#websocket\"\u003e关于二次元\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n            \u003cform class=\"navbar-form navbar-left\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Search\" value=\"golang是最好的语言\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-default\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"/register\"\u003e注册\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/login\"\u003e登录\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/nav\u003e\n\u003cdiv class=\"cow\"\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n    \u003cdiv data-spy=\"scroll\" data-target=\"#navbar-example\" data-offset=\"0\"\n         style=\"height:800px;overflow:auto; position: relative;\" class=\"col-md-8 col-lg-8 col-sm-10 col-xs-10\"\u003e\n        \u003cdiv\u003e\n            \n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/article/1","Calls":[{"Id":1,"CurrentPath":"/article/1","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"zh-CN\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \u003ctitle\u003eindex\u003c/title\u003e\n    \u003c!-- Bootstrap --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003c!-- 最新版本的 Bootstrap 核心 CSS 文件 --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 可选的 Bootstrap 主题文件（一般不用引入） --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 最新的 Bootstrap 核心 JavaScript 文件 --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cstyle type=\"text/css\"\u003e\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\n    \u003c/style\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n\u003cnav id=\"navbar-example\" class=\"navbar navbar-default navbar-static\" role=\"navigation\"\u003e\n    \u003cdiv class=\"container-fluid\"\u003e\n        \u003cdiv class=\"navbar-header\"\u003e\n            \u003cbutton class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\"\n                    data-target=\".bs-js-navbar-scrollspy\"\u003e\n                \u003cspan class=\"sr-only\"\u003e切换导航\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eWeb开发学习笔记\u003c/a\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"collapse navbar-collapse bs-js-navbar-scrollspy\"\u003e\n            \u003cul class=\"nav navbar-nav\"\u003e\n                \u003cli\u003e\u003ca href=\"adminlogin\"\u003e后台 \u003c!--\u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e--\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#go\"\u003eGO语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Spring\"\u003ePython语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Hibernate\"\u003eJava学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#Struts2\"\u003eJS学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#ELJSTL\"\u003ePHP学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#AJAX\"\u003e日记/感想\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#BootStrap\"\u003e后端知识学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"#websocket\"\u003e关于二次元\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n            \u003cform class=\"navbar-form navbar-left\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Search\" value=\"golang是最好的语言\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-default\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"/register\"\u003e注册\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/login\"\u003e登录\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/nav\u003e\n\u003cdiv class=\"cow\"\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n    \u003cdiv data-spy=\"scroll\" data-target=\"#navbar-example\" data-offset=\"0\"\n         style=\"height:800px;overflow:auto; position: relative;\" class=\"col-md-8 col-lg-8 col-sm-10 col-xs-10\"\u003e\n        \u003cdiv\u003e\n            aaaaaaaa\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/menu/1","Calls":[{"Id":1,"CurrentPath":"/menu/1","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"zh-CN\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \u003ctitle\u003eindex\u003c/title\u003e\n    \u003c!-- Bootstrap --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003c!-- 最新版本的 Bootstrap 核心 CSS 文件 --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 可选的 Bootstrap 主题文件（一般不用引入） --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 最新的 Bootstrap 核心 JavaScript 文件 --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cstyle type=\"text/css\"\u003e\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\n    \u003c/style\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n\u003cnav id=\"navbar-example\" class=\"navbar navbar-default navbar-static\" role=\"navigation\"\u003e\n    \u003cdiv class=\"container-fluid\"\u003e\n        \u003cdiv class=\"navbar-header\"\u003e\n            \u003cbutton class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\"\n                    data-target=\".bs-js-navbar-scrollspy\"\u003e\n                \u003cspan class=\"sr-only\"\u003e切换导航\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eWeb开发学习笔记\u003c/a\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"collapse navbar-collapse bs-js-navbar-scrollspy\"\u003e\n            \u003cul class=\"nav navbar-nav\"\u003e\n                \u003cli\u003e\u003ca href=\"adminlogin\"\u003e后台 \u003c!--\u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e--\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/1\"\u003e网站更新日志\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/2\"\u003eGO语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/3\"\u003ePython语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/4\"\u003eJava学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/5\"\u003eJS学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/6\"\u003ePHP学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/7\"\u003e日记/感想\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/8\"\u003e后端知识学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/9\"\u003e关于二次元\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n            \u003cform class=\"navbar-form navbar-left\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Search\" value=\"golang是最好的语言\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-default\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"/register\"\u003e注册\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/login\"\u003e登录\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/nav\u003e\n\u003cdiv class=\"cow\"\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n    \u003cdiv data-spy=\"scroll\" data-target=\"#navbar-example\" data-offset=\"0\"\n         style=\"height:800px;overflow:auto; position: relative;\" class=\"col-md-8 col-lg-8 col-sm-10 col-xs-10\"\u003e\n        \u003cdiv\u003e\n            aaaaaaaa\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e","ResponseCode":200},{"Id":1,"CurrentPath":"/menu/1","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"zh-CN\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"utf-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\n    \u003ctitle\u003eindex\u003c/title\u003e\n    \u003c!-- Bootstrap --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\n    \u003c!-- 最新版本的 Bootstrap 核心 CSS 文件 --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 可选的 Bootstrap 主题文件（一般不用引入） --\u003e\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\n\n    \u003c!-- 最新的 Bootstrap 核心 JavaScript 文件 --\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\n    \u003cstyle type=\"text/css\"\u003e\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\n    \u003c/style\u003e\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\n\u003cnav id=\"navbar-example\" class=\"navbar navbar-default navbar-static\" role=\"navigation\"\u003e\n    \u003cdiv class=\"container-fluid\"\u003e\n        \u003cdiv class=\"navbar-header\"\u003e\n            \u003cbutton class=\"navbar-toggle\" type=\"button\" data-toggle=\"collapse\"\n                    data-target=\".bs-js-navbar-scrollspy\"\u003e\n                \u003cspan class=\"sr-only\"\u003e切换导航\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n                \u003cspan class=\"icon-bar\"\u003e\u003c/span\u003e\n            \u003c/button\u003e\n            \u003ca class=\"navbar-brand\" href=\"#\"\u003eWeb开发学习笔记\u003c/a\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"collapse navbar-collapse bs-js-navbar-scrollspy\"\u003e\n            \u003cul class=\"nav navbar-nav\"\u003e\n                \u003cli\u003e\u003ca href=\"adminlogin\"\u003e后台 \u003c!--\u003cspan class=\"sr-only\"\u003e(current)\u003c/span\u003e--\u003e\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/1\"\u003e网站更新日志\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/2\"\u003eGO语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/3\"\u003ePython语言学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/4\"\u003eJava学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/5\"\u003eJS学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/6\"\u003ePHP学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/7\"\u003e日记/感想\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/8\"\u003e后端知识学习\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/menu/9\"\u003e关于二次元\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n            \u003cform class=\"navbar-form navbar-left\"\u003e\n                \u003cdiv class=\"form-group\"\u003e\n                    \u003cinput type=\"text\" class=\"form-control\" placeholder=\"Search\" value=\"golang是最好的语言\"\u003e\n                \u003c/div\u003e\n                \u003cbutton type=\"submit\" class=\"btn btn-default\"\u003eSubmit\u003c/button\u003e\n            \u003c/form\u003e\n            \u003cul class=\"nav navbar-nav navbar-right\"\u003e\n                \u003cli\u003e\u003ca href=\"/register\"\u003e注册\u003c/a\u003e\u003c/li\u003e\n                \u003cli\u003e\u003ca href=\"/login\"\u003e登录\u003c/a\u003e\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/nav\u003e\n\u003cdiv class=\"cow\"\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n    \u003cdiv data-spy=\"scroll\" data-target=\"#navbar-example\" data-offset=\"0\"\n         style=\"height:800px;overflow:auto; position: relative;\" class=\"col-md-8 col-lg-8 col-sm-10 col-xs-10\"\u003e\n        \u003cdiv\u003e\n            \u003ch3\u003e网站更新日志\u003c/h3\u003e\n            \u003cul\u003e\n            \u003cli\u003e\n    aaa\n\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n    \u003cdiv class=\"col-md-2 col-lg-2 col-sm-1 col-xs-1\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n\n\u003c/body\u003e\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/articleinsert","Calls":[{"Id":1,"CurrentPath":"/articleinsert","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{"Content-Type":"text/html; charset=UTF-8"},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"\u003c!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\u003e\r\n\u003chtml\u003e\r\n\u003chead\u003e\r\n    \u003cmeta charset=\"utf-8\"\u003e\r\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e\r\n    \u003ctitle\u003eindex\u003c/title\u003e\r\n    \r\n    \u003cscript src=\"https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js\"\u003e\u003c/script\u003e\r\n    \r\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\"\u003e\r\n    \r\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\"\u003e\r\n    \r\n    \u003cscript src=\"https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\r\n    \u003cstyle type=\"text/css\"\u003e\r\n        body{ font-family: Microsoft YaHei,'宋体' , Tahoma, Helvetica, Arial, \"\\5b8b\\4f53\", sans-serif;}\r\n    \u003c/style\u003e\r\n    \u003cscript src=\"https://cdn.bootcss.com/markdown.js/0.6.0-beta1/markdown.min.js\"\u003e\u003c/script\u003e\r\n\u003c/head\u003e\r\n\r\n\u003cbody\u003e\r\n\u003cdiv style=\"margin-top:15%;margin-left:20%;margin-right:20%\"\u003e\r\n    \u003ch2 class=\"text-center\"\u003e插入文章\u003c/h2\u003e\r\n    \u003cform action=\"/artinsert\" method=\"post\" name=\"form\" id=\"form\"\u003e\r\n        \u003cdiv class=\"form-group\"\u003e\r\n            \u003clabel for=\"Title\"\u003e标题\u003c/label\u003e\r\n            \u003cinput type=\"text\" class=\"form-control\" id=\"Title\" name=\"Title\"\u003e\r\n        \u003c/div\u003e\r\n        \u003cselect name=\"Menu\" class=\"form-control\"\u003e\r\n            \u003coption value=\"1\"\u003e网站更新日志\u003c/option\u003e\r\n            \u003coption value=\"2\"\u003eGO语言学习\u003c/option\u003e\r\n            \u003coption value=\"3\"\u003ePython语言学习\u003c/option\u003e\r\n            \u003coption value=\"4\"\u003eJava学习\u003c/option\u003e\r\n            \u003coption value=\"5\"\u003eJS学习\u003c/option\u003e\r\n            \u003coption value=\"6\"\u003ePHP学习\u003c/option\u003e\r\n            \u003coption value=\"7\"\u003e日记/感想\u003c/option\u003e\r\n            \u003coption value=\"8\"\u003e后端知识学习\u003c/option\u003e\r\n            \u003coption value=\"9\"\u003e关于二次元\u003c/option\u003e\r\n        \u003c/select\u003e\r\n        \u003ctextarea class=\"form-control\" rows=\"500\" name=\"Content\" id=\"Content\"\u003e\u003c/textarea\u003e\r\n        \u003cbutton class=\"btn btn-default\" name=\"btn\" id=\"btn\" type=\"submit\"\u003e确认\u003c/button\u003e\r\n    \u003c/form\u003e\r\n\u003c/div\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e","ResponseCode":200}]},{"HttpVerb":"GET","Path":"/artinsert","Calls":[{"Id":0,"CurrentPath":"/artinsert","MethodType":"GET","PostForm":null,"RequestHeader":{"Upgrade-Insecure-Requests":" 1\r"},"CommonRequestHeaders":null,"ResponseHeader":{},"RequestUrlParams":{},"RequestBody":"","ResponseBody":"","ResponseCode":200}]}]}